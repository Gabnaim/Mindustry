Initialize:
	set maxUnits 4
	set unitType @zenith
	set radius 5

	op shl procId @thisx 10 # first 10 bit for x
	op add procId procId @thisy # second 10 bit for y

	set STARTING 0
	set MOVING 1
	set RELEASING 2
	set FINISHED 3
	set status STARTING

GetLinks:
	GetEntry:
		set entry conveyor1
		jump GetEntry equal entry null
	GetSwitch:
		set switch switch1
		jump GetSwitch equal switch null

	sensor moveX entry @x
	sensor moveY entry @y


Start:
CheckActive:
	sensor active switch @enabled
	jump Reset equal active false

	print "Status: "
	print status
	print "\n"

	jump Start equal status FINISHED
	jump Proceed equal status MOVING
	jump Release equal status RELEASING
	
StartMove:
	print "Starting move\n"
	set i 0
	set firstUnit null

	MoveLoop:
		Bind:
			ubind unitType
			jump Start equal @unit null
			sensor isDead @unit @dead
			jump MoveLoop equal isDead true

			jump FinishMoveGroup equal firstUnit @unit
			jump FinishMoveGroup greaterThanEq i maxUnits
			jump ProcessMove notEqual firstUnit null
			set firstUnit @unit
		
		ProcessMove:
			sensor flag @unit @flag
			jump MoveLoop notEqual flag 0
			print "Moving\n"

			ucontrol flag procId
			op add i i 1
			ucontrol approach moveX moveY radius
			jump MoveLoop lessThan i maxUnits
		
		FinishMoveGroup:
			set totalFlagged i
			set firstUnit null
			set status MOVING
			jump Start always

Proceed:
	print "Proceeding\n"
	set j 0

	ProceedLoop:
		Bind:
			ubind unitType
			jump Start equal @unit null
			sensor isDead @unit @dead
			jump ProceedLoop equal isDead true
			jump FinishProceed greaterThanEq j totalFlagged
		
		Navigate:
			sensor flag @unit @flag
			jump ProceedLoop notEqual flag procId
			
			ucontrol within moveX moveY radius isNear
			jump ProceedLoop equal isNear false

			ucontrol move moveX moveY
			op add j j 1
			print "Moving to entry\n"
			wait 1
			ucontrol payEnter
			jump ProceedLoop lessThan j totalFlagged

		FinishProceed:
			set status RELEASING
			jump Start always

Release:
	print "Releasing\n"
	set firstUnit null
	set k 0

	ReleaseLoop:
		Bind:
			ubind unitType
			jump Start equal @unit null
			sensor isDead @unit @dead
			jump ReleaseLoop equal isDead true

			jump FinishRelease greaterThanEq k totalFlagged
			jump FinishRelease equal firstUnit @unit
			jump ReleaseUnit notEqual firstUnit null

			set firstUnit @unit
		
		ReleaseUnit:
			sensor flag @unit @flag
			jump ReleaseLoop notEqual flag procId
			op add k k 1
			print "Releasing unit\n"
			ucontrol flag 0
			ucontrol unbind
			jump ReleaseLoop lessThan k totalFlagged

		FinishRelease:
			set status FINISHED

FinishRun:
	
	print "\nFlagged: "
	print totalFlagged
	printflush message1
	jump Start always
	
Reset:
	set status STARTING
	set totalFlagged 0
	printflush message1
	jump Start always
	
	

