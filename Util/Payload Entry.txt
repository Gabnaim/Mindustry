Initialize:
	set maxUnits 4
	set unitType @eclipse

	op shl procId @thisx 10 # first 10 bit for x
	op add procId procId @thisy # second 10 bit for y

GetLinks:
	GetEntry:
		set entry conveyor1
		jump GetEntry equal entry null
	GetSwitch:
		set switch switch1
		jump GetSwitch equal switch null

	sensor moveX entry @x
	sensor moveY entry @y

Preflag:
	set totalFlagged 0
	set totalFree 0
	set totalUnits 0
	set firstUnit null
	set flagged 0
	set free 0
	set i 0
	set neededFlags 0
	set status "COUNT"

	PreflagLoop:
		ubind unitType
		jump PreflagLoop equal @unit null
		sensor isDead @unit @dead
		jump PreflagLoop equal isDead true

		jump FinishCount equal firstUnit @unit
		jump FlagProcess notEqual firstUnit null
		set firstUnit @unit

	FlagProcess:
		sensor flag @unit @flag
		jump CountFlagged equal flag procId
		jump CountFree equal flag 0
		jump NextCount always
		
	CountFlagged:
		op add flagged flagged 1
		jump NextCount notEqual status "UNFLAG"
		ucontrol flag 0
		op sub neededFlags neededFlags 1
		jump FlagDone equal neededFlags 0
		jump NextCount always

	CountFree:
		op add free free 1
		jump NextCount notEqual status "FLAG"
		ucontrol flag procId
		op sub neededFlags neededFlags 1
		jump FlagDone equal neededFlags 0
	
	NextCount:
		op add i i 1
		jump PreflagLoop always

	FinishCount:
		jump GetNextAction greaterThan totalUnits 0
		set totalFlagged flagged
		set totalFree free
		set totalUnits i

		GetNextAction:
			jump FlagDone equal totalFlagged maxUnits
			jump FlagDone equal status "FLAG"
			jump FlagDone equal status "UNFLAG"

			set flagged 0
			set free 0
			set i 0
			set firstUnit null

			jump NeedFlags lessThan totalFlagged maxUnits
			op sub neededFlags totalFlagged maxUnits
			set status "UNFLAG"
			jump PreflagLoop always

			NeedFlags:
				op sub neededFlags maxUnits totalFlagged
				op min neededFlags neededFlags totalFree
				jump FlagDone lessThanEq neededFlags 0
				set status "FLAG"
				jump PreflagLoop always

	FlagDone:

	GetStartUnit:
		set status "START"
		# get an already flagged unit
		ubind unitType
		jump GetStartUnit equal @unit null
		sensor flag @unit @flag
		jump GetStartUnit notEqual flag procId

		sensor size @unit @size
		op mul radius size 2

Start:
CheckActive:
	sensor active switch @enabled
	jump ActiveChanged notEqual active lastActive
	jump Reset equal active false

BindUnit:
	ubind unitType
	jump Start equal @unit null
	jump FinishGroup equal firstUnit @unit
	jump ProcessUnit notEqual firstUnit null
	set firstUnit @unit
	
ProcessUnit:
	sensor isDead @unit @dead
	jump BindUnit equal isDead true

	sensor flag @unit @flag
	jump BindUnit notEqual flag procId

Approach:
	set status "PROCESSING"
	ucontrol within moveX moveY radius isNear
	jump Enter equal isNear true
	ucontrol boost true
	ucontrol approach moveX moveY radius
	jump Start always

Enter:
	ucontrol move moveX moveY
	wait 2
	ucontrol payEnter
	jump Start always

FinishGroup:
	set firstUnit null
	jump Start always

ActiveChanged:
	set lastActive active
	jump Reset equal active false
	jump Initialize always

Reset:
	jump Start equal status "IDLE"
	set status "STOPPING"

	set firstUnit null
	StopLoop:
		ubind unitType
		jump AllStopped equal @unit null
		sensor dead @unit @dead
		jump StopLoop equal dead true

		jump AllStopped equal @unit firstUnit
		jump SetStopFirst equal firstUnit null
		sensor firstDead firstUnit @dead
		jump StopProcess equal firstDead false

		SetStopFirst:
			set firstUnit @unit

		StopProcess:
			sensor flag @unit @flag
			jump StopLoop notEqual flag procId
			ucontrol flag 0
			ucontrol unbind

		jump StopLoop always
		
	AllStopped:
		set status "IDLE"
		jump Start always
	
	
