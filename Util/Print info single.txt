Initialize:
	set unitType @poly
	printflush message1
	set showFlag true
	set showCarried true
	set showHealth true
	op or showLine showFlag showCarried
	op or showLine showLine showHealth

Start:
Bind:
	ubind unitType
	jump NoUnits equal @unit null
	sensor isDead @unit @dead
	jump Start equal isDead true

	jump FinishGroup equal firstUnit @unit
	jump ProcessUnit notEqual firstUnit null

SetFirst:
	set firstUnit @unit

ProcessUnit:
	jump Next equal showLine false
	set hasData false

	PrintFlag:
		jump PrintCarried equal showFlag false
		sensor flag @unit @flag
		jump PrintCarried equal flag 0
		set hasData true
		print flag
		print " "
	
	PrintCarried:
		jump PrintHealth equal showHealth false
		sensor carried @unit @totalItems
		jump PrintHealth equal carried 0
		sensor material @unit @firstItem
		set hasData true
		print carried
		print " "
		print material
		print " "

	PrintHealth:
		jump PrintEnd equal showHealth false
		sensor maxHealth @unit @maxHealth
		sensor health @unit @health
		jump PrintEnd equal health maxHealth
		op mul health health 100
		op idiv healthPct health maxHealth
		set hasData true
		print healthPct
		print "%"
		
	PrintEnd:
		jump Next equal hasData false
		print "\n"
	
Next:
	op add units units 1
	jump Start always
	
FinishGroup:
	print unitType
	print ": "
	print units
	print "\n"
	set units 0
	set firstUnit null
	printflush message1
	jump Start always

NoUnits:
	print "No "
	print unitType
	print "s were found"
	printflush message1
	jump Start always

