Initialize:
	op shl procId @thisx 10 # first 10 bit for x
	op add procId procId @thisy # second 10 bit for y

	set support false
	set attackCount 0
	set supportCount 0
	set maxAttack 6
	set maxSupport 4

GetLinks:
	set switch switch1
	jump GetLinks equal switch null

Start:	
CheckActive:
	sensor active switch @enabled
	jump Bind equal active true
	set attackCount 0
	set supportCount 0
	jump Start always
	
Bind:
	jump BindSupport equal support true

BindAttack:
	set unitType @zenith
	ubind unitType
	jump Next equal @unit null
	jump CheckUnit always

BindSupport:
	set unitType @mega
	ubind unitType
	jump CheckUnit notEqual @unit null
	set unitType @poly
	ubind unitType
	jump Next equal @unit null

CheckUnit:
	set currentUnit @unit
	sensor flag @unit @flag
	jump Mine equal flag procId
	jump Start notEqual flag 0

Mine:
	sensor isDead @unit @dead
	jump RemoveDead equal isDead true
	jump SetFirst equal firstUnit null
	jump Next equal firstUnit @unit
	jump Mark always

SetFirst:
	set firstUnit @unit
	
Mark:
	jump MarkSupport equal support true

MarkAttack:
	jump Unflag greaterThanEq attackCount maxAttack
	op add attackCount attackCount 1
	ucontrol flag procId
	jump Start always

MarkSupport:
	jump Unflag greaterThanEq supportCount maxSupport
	op add supportCount supportCount 1
	ucontrol flag procId
	jump Start always

Unflag:
	ucontrol flag 0
	jump Start always
	
RemoveDead:
	ucontrol flag 0
	jump RemoveDeadSupport equal support true
	op sub attackCount attackCount 1
	jump Start always

RemoveDeadSupport:
	op sub supportCount supportCount 1
	jump Start always

Next:
	op equal support support false
	set firstUnit null
	set attackCount 0
	set supportCount 0
	jump Start always


