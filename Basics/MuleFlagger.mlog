set name "Mule Flagger"

Initialize:
	set unitType @flare
	set muleCount 2 # only one or two are supported
	set releaseWaitSecs 5

	set status "INITIALIZE"
	set error " "

	GetSwitch:
		set switch switch1
		jump GetSwitch equal switch null

	op min muleCount muleCount 2

	op mul procId @thisx @maph
	op add procId procId @thisy
	op floor procId procId

	op mul releaseWaitMs releaseWaitSecs 1000

	op add nearX @thisx 1
	op add nearY @thisy 1
	op add farX @thisx 15
	op add farY @thisy 15

	set releaseStart @time
	sensor lastActive switch @enabled
	set moveDebug true
	
Start:
	sensor active switch @enabled
	jump ActiveChanged notEqual active lastActive
	jump Reset equal active false
	op sub releaseWait @time releaseStart
	jump Reset greaterThanEq releaseWait releaseWaitMs

SelectMule:
	jump GetMule1 equal muleCount 1

	# flip the mule switch
	op notEqual useMule1 useMule1 true
	jump GetMule2 equal useMule1 false
	
	GetMule1:
		set useMule1 true
		set mule mule1
		jump CheckMule always
	GetMule2:
		set mule mule2

CheckMule:
	jump FindMule equal mule null
	sensor muleDead mule @dead
	jump FindMule equal muleDead true

	sensor muleFlag mule @flag
	jump StartRun equal muleFlag procId
	jump FindMule notEqual muleFlag 0
	RecycleMule:
		ubind mule
		ucontrol flag procId
		jump StartRun always

FindMule:
	set status "FIND"
	set free 0
	set flagged 0
	set minDistance 1000

	ubind unitType
	jump Start equal @unit null
	set firstUnit @unit
	jump FlagProcess always

	FindLoop:
		ubind unitType
		jump FinishCount equal firstUnit @unit
		jump FindDone greaterThanEq flagged muleCount
	
	FlagProcess:
		sensor unitDead @unit @dead
		jump FindLoop equal unitDead true
		sensor flag @unit @flag
		jump FlagMules equal flag procId
		jump FindLoop notEqual flag 0

		sensor controlled @unit @controlled
		jump FindLoop greaterThanEq controlled 2

	CheckDistance:
		ucontrol stop
		sensor x @unit @x
		sensor y @unit @y
		op sub xDiff @thisx x
		op sub yDiff @thisy y
		op len distance xDiff yDiff
		jump CountFree equal status "FIND"
		GetClosest:
			op sub diff distance minDistance
			op abs diff diff
			jump FlagMule1 lessThan diff 3
			jump FindLoop equal muleCount 1

			op sub diff distance prevMin
			op abs diff diff
			jump FlagMule2 lessThan diff 3
			jump FindLoop always
		
		CountFree:
			op add free free 1
			jump FindLoop greaterThan distance minDistance
			set prevMin minDistance
			set minDistance distance
			jump FindLoop always
	
	FinishCount:
		jump Start equal free 0
		jump FindMule equal status "FLAG"
		set status "FLAG"
		jump FindLoop always

	FlagMules:
		jump FlagMule2 equal flagged 1
	
	FlagMule1:
		ucontrol flag procId
		set mule1 @unit
		op add flagged flagged 1
		jump FindLoop lessThan flagged muleCount
		jump FindDone always

	FlagMule2:
		ucontrol flag procId
		set mule2 @unit
		op add flagged flagged 1
		jump FindLoop lessThan flagged muleCount
	
	FindDone:
		set error " "
		jump DebugMove equal moveDebug true

StartRun:
	ubind mule
	set releaseStart @time
	jump MoveFar equal status "MOVEFAR"

	MoveNear:
		ucontrol approach nearX nearY 3
		ucontrol within nearX nearY 4 isNear
		set status "MOVENEAR"
		jump Next equal isNear false

	MoveFar:
		ucontrol approach farX farY 3
		ucontrol within farX farY 4 isFar
		set status "MOVEFAR"
		jump MoveNear equal isFar true

	Next:
		jump Start always

ActiveChanged:
	set lastActive active
	jump Stop equal active false
	set releaseStart @time
	jump Start always

Reset:
	jump Start equal status "IDLE"
	jump Release equal status "RELEASING"

Stop:
	set status "STOPPING"
	ubind mule1
	ucontrol stop
	ubind mule2
	ucontrol stop
	set status "RELEASING"

Release:
	op sub releaseWait @time releaseStart
	jump Start lessThan releaseWait releaseWaitMs
	
	Unflag:
		ubind unitType
		set firstUnit @unit
		jump UnflagProcess always
	
		UnflagLoop:
			ubind unitType
			jump FinishRelease equal firstUnit @unit
	
		UnflagProcess:
			sensor flag @unit @flag
			jump UnflagLoop notEqual flag procId
			ucontrol stop
			ucontrol flag 0
			ucontrol unbind
			jump UnflagLoop always
		
	FinishRelease:
		set status "IDLE"
		set releaseStart @time
		jump Start always

DebugMove:
	jump Start equal status "IDLE"
	set status "DEBUGMOVE"
		
		ubind mule1
		sensor x @unit @x
		sensor y @unit @y
		op add debugX x 10
		op add debugY y 2
		ucontrol move debugX debugY

		ubind mule2
		sensor x @unit @x
		sensor y @unit @y
		op add debugX x 10
		op add debugY y 2
		ucontrol move debugX debugY
		
		set debugMove false
		jump StartRun always