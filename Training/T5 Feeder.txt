set name "T5 Feeder"

Initialize:
	set status "INITIALIZE"
	set unitType @mega
	set sourceMin 500

	set items 4
	set material1 @silicon
	set stockLevel1 2000
	set material2 @plastanium
	set stockLevel2 1200
	set material3 @surge-alloy
	set stockLevel3 1000
	set material4 @phase-fabric
	set stockLevel4 700

	set returnMaterial null
	set error " "

	set dropRange 7
	set releaseWaitSecs 30

	op shl procId @thisx 9
	op add procId procId @thisy
	op mul releaseWaitMs releaseWaitSecs 1000

	GetDropTarget:
		set l 0
		LinkLoop:
			getlink link l
			sensor type link @type
			jump Found equal type @tetrative-reconstructor
		NextLink:
			op add l l 1
			jump LinkLoop lessThan l @links
			jump GetDropTarget always
		Found:
			set dropTarget link
	
	GetDropCoords:
		sensor dropX dropTarget @x
		sensor dropY dropTarget @y 

	GetStartInfo:
		ubind unitType
		jump ReadInfo notEqual @unit null
		NoUnits:
			set error "No units"
			jump GetStartInfo always
	
		ReadInfo:
			sensor cap @unit @itemCapacity
			ulocate building core false 0 sourceX sourceY sourceFound source
			jump GetStartInfo equal sourceFound false

	set releaseStart @time
	set error " "
	set status "START"

Start:
	op sub releaseWait @time releaseStart
	jump Release greaterThanEq releaseWait releaseWaitMs

SelectMaterial:
	sensor carried mule @totalItems
	sensor carriedMat mule @firstItem

	set i 0
	set minIndex -1
	set minRate 1
	SelectLoop:
		op add arrayReturn @counter 1
		jump ArrayGet always 

	CheckMaterial:
		sensor dropLevel dropTarget material
		op sub needed stockLevel dropLevel
		jump NextMaterial lessThanEq needed 0

		# if we are carrying material that is still needed,
		# deliver it even if another stock is lower
		jump Feed equal material carriedMat
		
		op div stockRate dropLevel stockLevel
		jump NextMaterial greaterThanEq stockRate minRate
	
		set minIndex i
		set minRate stockRate

	NextMaterial:
		op add i i 1
		jump SelectLoop lessThan i items

	jump NothingToDo equal minIndex -1

	GetMinMaterial:
		set i minIndex
		op add arrayReturn @counter 1
		jump ArrayGet always 	

		sensor sourceLevel source material
		op sub available sourceLevel sourceMin
		jump NotEnoughStock lessThanEq available 0
		sensor dropLevel dropTarget material
		op sub needed stockLevel dropLevel
		op min amount needed available
		op min amount amount cap

	set error " "
	set releaseStart @time
	jump Feed always

	NothingToDo:
		jump Start always
	
	NotEnoughStock:
		set error "Not enough stock"
		jump Start always
	
Feed:
CheckMule:
	jump FindMule equal mule null
	sensor muleDead mule @dead
	jump FindMule equal muleDead true

	sensor muleFlag mule @flag
	jump StartRun equal muleFlag procId
	jump FindMule notEqual muleFlag 0
	set @unit mule
	jump StartRun always

FindMule:
	set releaseStart @time
	set firstUnit null
	set free 0
	set minDistance 1000
	set status "FIND"

	FindLoop:
		ubind unitType
		jump NotFound equal @unit null
		sensor unitDead @unit @dead
		jump FindLoop equal unitDead true
	
		jump FinishCount equal firstUnit @unit
		jump FlagProcess notEqual firstUnit null
		set firstUnit @unit
	
	FlagProcess:
		sensor flag @unit @flag
		jump UseMule equal flag procId
		jump FindLoop notEqual flag 0
	
	CheckDistance:
		ucontrol stop
		sensor x @unit @x
		sensor y @unit @y
		op sub xDiff @thisx x
		op sub yDiff @thisy y
		op len distance xDiff yDiff
		jump CountFree equal status "FIND"
		GetClosest:
			op sub diff distance minDistance
			op abs diff diff
			jump FlagMule lessThan diff 3
			jump FindLoop always
		
		CountFree:
			op add free free 1
			jump FindLoop greaterThan distance minDistance
			set minDistance distance
			jump FindLoop always
	
	FinishCount:
		jump NotFound equal free 0
		set error " "
		set firstUnit null
		jump FindMule equal status "FLAG"
		set status "FLAG"
		jump FindLoop always
	
	NotFound:
		set error "No free units"
		jump Start always
	
	FlagMule:
		ucontrol flag procId
	
	UseMule:
		set mule @unit
		ucontrol boost true
	
	FindDone:
		set error " "

StartRun:
	sensor carried mule @totalItems
	sensor carriedMat mule @firstItem

	jump PickupFromSource equal carried 0
	jump DropToSource notEqual material carriedMat
	jump DropToTarget always

DropToSource:
	ucontrol within sourceX sourceY dropRange isNearSource
	jump SourceDrop equal isNearSource true
	set status "TOSOURCEDROP"
	ucontrol boost true
	ucontrol approach sourceX sourceY dropRange
	jump Start always

	SourceDrop:
		set status "SOURCEDROP"
		set releaseStart @time
		set dropI 0
		SourceDropLoop:
			ucontrol itemDrop source cap
			sensor carried @unit @totalItems
			jump Start equal carried 0
			op add dropI dropI 1
			jump SourceDropLoop lessThan dropI 100

		# drop to air if source is full
		ucontrol itemDrop @air cap
		jump Start always

PickupFromSource:
	ucontrol within sourceX sourceY dropRange isNearSource
	jump SourcePickup equal isNearSource true
	ucontrol boost true
	ucontrol approach sourceX sourceY dropRange
	set status "TOSOURCEPICKUP"
	jump Start always

	SourcePickup:
		set status "SOURCEPICKUP"
		set releaseStart @time
		set pickupI 0
		SourcePickupLoop:
			ucontrol itemTake source material amount
			sensor carried mule @totalItems
			jump DropToTarget greaterThanEq carried amount

			op add pickupI pickupI 1
			jump SourcePickupLoop lessThan pickupI 100 
			# make it work when the core was upgraded
			ulocate building core false 0 sourceX sourceY sourceFound source

DropToTarget:
	ucontrol within dropX dropY dropRange isNearDrop
	jump TargetDrop equal isNearDrop true
	set status "TOTARGETDROP"
	ucontrol boost true
	ucontrol approach dropX dropY dropRange
	jump Start always

	TargetDrop:
		set status "TARGETDROP"
		set dropI 0
		TargetDropLoop:
			ucontrol itemDrop dropTarget cap
			sensor carried @unit @totalItems
			jump Start equal carried 0
			op add dropI dropI 1
			jump TargetDropLoop lessThan dropI 100 

	# return to source if full
	jump DropToSource always

Release:
	set releaseStart @time
	jump Start equal mule null
	set status "RELEASE"
	sensor carriedMat @unit @firstItem
	jump ReleaseUnit equal carriedMat null

	Dump:
		ucontrol within sourceX sourceY dropRange isNearSource
		jump SourceDump equal isNearSource true
		ucontrol boost true
		ucontrol approach sourceX sourceY dropRange
		jump Dump always
	
		SourceDump:
			set dropI 0
			SourceDumpLoop:
				ucontrol itemDrop source cap
				sensor carried @unit @totalItems
				jump ReleaseUnit equal carried 0
				op add dropI dropI 1
				jump SourceDumpLoop lessThan dropI 100
	
			# drop to air if source is full
			ucontrol itemDrop @air cap
	
	ReleaseUnit:
		ucontrol stop
		ucontrol flag 0
		ucontrol boost false
		ucontrol unbind
		set mule null
		set status "IDLE"
		set releaseStart @time
		jump Start always

ArrayGet:
	op mul offset i 3
	op add offset offset 1
	op add arrayLoc @counter offset
	set @counter arrayLoc

	set material material1
	set stockLevel stockLevel1
	set @counter arrayReturn

	set material material2
	set stockLevel stockLevel2
	set @counter arrayReturn

	set material material3
	set stockLevel stockLevel3
	set @counter arrayReturn

	set material material4
	set stockLevel stockLevel4
	set @counter arrayReturn




	