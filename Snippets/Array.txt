Initialize:
	set switch switch1
	jump Initialize equal switch null

	set length 10
	printflush message1

Start:
	sensor active switch @enabled
	jump Start equal active false

	set start @time
	
SetValues:
	set i 0
	SetLoop:
		op rand value 100
		op floor value value

		op add arrayReturn @counter 1
		jump ArraySet always 
	
		op add i i 1
		jump SetLoop lessThan i length

PrintAfterSet:
	op add printReturn @counter 1
	jump PrintValues always
	op add printReturn @counter 1
	jump PrintTime always

FindMin:
	set i 0
	set min 999
	set minIndex -1
	MinLoop:
		op add arrayReturn @counter 1
		jump ArrayGet always 

		jump MinNext greaterThanEq value min
		set min value
		set minIndex i

	MinNext:
		op add i i 1
		jump MinLoop lessThan i length

	print "Minimum: "
	print min
	print " at "
	print minIndex
	print "\n"

	op add printReturn @counter 1
	jump PrintTime always

FindMax:
	set i 0
	set max -999
	set maxIndex -1
	MaxLoop:
		op add arrayReturn @counter 1
		jump ArrayGet always 

		jump MaxNext lessThanEq value max
		set max value
		set maxIndex i

	MaxNext:
		op add i i 1
		jump MaxLoop lessThan i length

	print "Maximum: "
	print max
	print " at "
	print maxIndex
	print "\n"

	op add printReturn @counter 1
	jump PrintTime always

InsertionSort:
	set k 1
	
	SortLoop:
		set i k
		op add arrayReturn @counter 1
		jump ArrayGet always 
	    set x value

		op sub j i 1
		UnsortedLoop:
			set i j
			op add arrayReturn @counter 1
			jump ArrayGet always 
			set a[j] value
			jump NextPosition lessThanEq a[j] x

			op add i j 1
			set i j
			op add arrayReturn @counter 1
			jump ArrayGet always 
			set a[j+1] value

			set value a[j]
			op add i j 1
			op add arrayReturn @counter 1
			jump ArraySet always 

	        op sub j j 1
			jump UnsortedLoop greaterThanEq j 0

	NextPosition:
		set value x
		op add i j 1
		op add arrayReturn @counter 1
		jump ArraySet always 

	    op add k k 1
		jump SortLoop lessThan k length

PrintAfterSort:
	op add printReturn @counter 1
	jump PrintValues always

Done:
	op add printReturn @counter 1
	jump PrintTime always

	printflush message1
	control enabled switch false
	jump Start always

PrintTime:
	op sub elapsed @time start
	op floor elapsed elapsed
	op div elapsed elapsed 1000
	print "Run time: "
	print elapsed
	print "s\n"
	set @counter printReturn

PrintValues:
	set i 0
	PrintLoop:
		op add arrayReturn @counter 1
		jump ArrayGet always 

		print i
		print " "
		print value
		print "\n"
	
		op add i i 1
		jump PrintLoop lessThan i length
	set @counter printReturn
	
ArraySet:
	op mul offset i 2
	op add offset offset 1
	op add arrayLoc @counter offset
	set @counter arrayLoc

	set value0 value
	set @counter arrayReturn
	set value1 value
	set @counter arrayReturn
	set value2 value
	set @counter arrayReturn
	set value3 value
	set @counter arrayReturn
	set value4 value
	set @counter arrayReturn
	set value5 value
	set @counter arrayReturn
	set value6 value
	set @counter arrayReturn
	set value7 value
	set @counter arrayReturn
	set value8 value
	set @counter arrayReturn
	set value9 value
	set @counter arrayReturn

ArrayGet:
	op mul offset i 2
	op add offset offset 1
	op add arrayLoc @counter offset
	set @counter arrayLoc

	set value value0
	set @counter arrayReturn
	set value value1
	set @counter arrayReturn
	set value value2
	set @counter arrayReturn
	set value value3
	set @counter arrayReturn
	set value value4
	set @counter arrayReturn
	set value value5
	set @counter arrayReturn
	set value value6
	set @counter arrayReturn
	set value value7
	set @counter arrayReturn
	set value value8
	set @counter arrayReturn
	set value value9
	set @counter arrayReturn

	