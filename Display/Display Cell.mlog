Initialize:
	set charsPerRow 12
	set decimals 4
	set rows 16
	set columns 2
	set displaySize 176
	set maxDisplays 8

	GetLinks:
		set l 0
		set displayI 0
		LinkLoop:
			getlink link l
			sensor type link @type
			jump FoundCell equal type @memory-cell
			jump FoundBank equal type @memory-bank
			jump FoundLargeDisplay equal type @large-logic-display
			jump NextLink always
			FoundLargeDisplay:
				set display link
				op add displayReturn @counter 1
				jump SetDisplay always
				op add displayI displayI 1
				jump NextLink always
			FoundCell:
				set memory link
				set cap 64
				jump NextLink always
			FoundBank:
				set memory link
				set cap 512
			NextLink:
				op add l l 1
				jump LinkLoop lessThan l @links
	
			jump GetLinks equal memory null
			set displays displayI
			jump GetLinks equal displays 0
		
	SetColors:
		set bgColor %000000
		set gray %505050
		set fontColor %ffff99
		set indexColor %00ffff
		set imgColor %ffffff

	SetSpacing:
		set colSpacing 4
		set charSpacing 2
		set margin 0

	PrecalcVariables:
		op div halfColSp colSpacing 2
		op div halfDisplay displaySize 2
		op mul itemsPerDisplay rows columns
		op mul maxDataItems itemsPerDisplay displays
		
	CalcGrid:
		op mul margins margin 2
		op sub available displaySize margins
		op div rowOffset available rows
		op floor rowOffset rowOffset
		op div colOffset available columns
		op floor colOffset colOffset 
		op min rowOffset rowOffset colOffset
		op sub colWidth colOffset colSpacing	

	CalcFont:
		op mul charHeight rowOffset 0.8
		op floor charHeight charHeight
		op sub rowSpacing rowOffset charHeight
		op div halfRowSp rowSpacing 2

		op div charOffset colWidth charsPerRow
		op floor charOffset charOffset
		op sub charWidth charOffset charSpacing
		op min charWidth charWidth charHeight
		op max charWidth charWidth 3
		op add charOffset charWidth charSpacing

		op idiv stroke charWidth 6
		op add stroke stroke 1

	CalcArea:
		op sub topBounds displaySize halfRowSp

		# data positions
		
		op mul indexWidth charOffset 2
		op sub fractionSpaces decimals 1
		op mul fractionSpaces decimals charSpacing
		op mul fractionText decimals charWidth
		op add fractionWidth fractionText fractionSpaces
		op max dotOffset stroke charSpacing
		op add dotOffset dotOffset stroke
		op sub intPos colWidth fractionWidth
		jump CalcFontParams equal decimals 0
		op sub intPos intPos dotOffset
	
	CalcFontParams:
		op mul temp stroke 3
		op sub temp charHeight temp
		op div temp temp 2
		op floor midOffset temp 
		op add midOffset midOffset stroke
		op sub topOffset charHeight stroke
		op sub rightOffset charWidth stroke
		op sub halfRectH charHeight midOffset
		op sub halfVertH halfRectH stroke

PrintInfo:
	print "Displays cell data. Empty cells are skipped"
	print "\nDisplays: "
	print displays
	print "\nRows per display: "
	print rows
	print "\nColumns per display: "
	print columns
	print "\nCharacters per row in a column: "
	print charsPerRow
	print "\nDecimals: "
	print decimals
	printflush message1

	set i 0
	set displayI 0

ClearAll:
	op add displayReturn @counter 1
	jump GetDisplay always
	draw clear 0 0 0
	drawflush display
	op add displayI displayI 1
	jump ClearAll lessThan displayI displays

	set displayI 0
	jump StartCycle always

Start:
	jump StartCycle greaterThanEq i cap
	jump StartDisplay lessThan dataItems maxDataItems

StartCycle:
	op sub cycleTime @time cycleStart
	set cycleStart @time
	set i 0
	set dataItems 0
	set displayI 0

StartDisplay:
	op add temp dataItems 1
	op idiv displayI temp itemsPerDisplay

	op add displayReturn @counter 1
	jump GetDisplay always

StartCol1:
	draw stroke stroke
	set col 0
	set leftBounds margin

StartColumn:
	op sub curY topBounds charHeight
	op sub clearY curY halfRowSp
	op sub clearX leftBounds margin
	op add indX leftBounds indexWidth
	op add integerX leftBounds intPos
	op add dotX leftBounds dotPos
	set row 0

StartRow:
	CalcRowPositions:
		op add midY curY midOffset
		op add topY curY topOffset
		
	GetValue:
		read stored memory i
		jump Skip equal stored 0
		op add dataItems dataItems 1

	ClearLine:
		op sub clearY curY halfRowSp
		draw col bgColor
		draw rect clearX clearY colOffset rowOffset
		
	PrintIndex:
		draw col indexColor
		set printValue i
		set curX indX
		op add callback @counter 1
		jump PrintDigitsBackwards always

		draw col fontColor

	PrintInteger:
		op floor printValue stored
		set curX integerX
		op add callback @counter 1
		jump PrintDigitsBackwards always

	PrintFraction:
		jump FinishLine equal decimals 0
		op mod printValue stored 1
		jump FinishLine equal printValue 0
		op add curX integerX stroke
		draw lineRect curX curY stroke stroke

		op add curX curX dotOffset
		op add callback @counter 1
		jump PrintDigitsForwards always
		
	FinishLine:
		drawflush display
		op add row row 1
	
NextItem:
	op add i i 1
	jump Done greaterThanEq i cap 
	jump ChangeCol equal row rows

NextLine:
	op sub curY curY rowOffset
	jump StartRow always

ChangeCol:
	op add col col 1
	jump Start greaterThanEq col columns
	op add leftBounds leftBounds colOffset
	jump StartColumn always

Skip:
	op add i i 1
	jump StartRow lessThan i cap 

Done:
	ClearEmptyArea:
		draw col bgColor
		draw rect leftBounds 0 colOffset clearY
		drawflush display
	ClearCols:
		op add col col 1
		jump ClearDisplays equal col columns
		op add clearX leftBounds colOffset
		op sub clearX leftBounds margin
		draw rect clearX displaySize displaySize
		drawflush display

	ClearDisplays:
		op add displayI displayI 1
		jump Start greaterThanEq displayI displays
		op add displayReturn @counter 1
		jump GetDisplay always
		draw clear 0 0 0
		drawflush display	
		jump ClearDisplays always
	jump Start always

#---------------------------------------------
# Draw Numbers
#---------------------------------------------

PrintDigitsForwards:
	set f 1
	PrintFLoop:
		op mul printValue printValue 10
		op floor digit printValue
		op mod printValue printValue 1
		
		DrawDigitForwards:
			op add drawback @counter 11
			op add @counter @counter digit
			jump Draw0 equal digit 0
			jump Draw1 equal digit 1
			jump Draw2 equal digit 2
			jump Draw3 equal digit 3
			jump Draw4 equal digit 4
			jump Draw5 equal digit 5
			jump Draw6 equal digit 6
			jump Draw7 equal digit 7
			jump Draw8 equal digit 8
			jump Draw9 equal digit 9
		
		NextDigitForwards:
			op add f f 1
			jump FinishPrintForward greaterThan f decimals
			op add curX curX charOffset
			jump PrintFLoop notEqual printValue 0

	FinishPrintForward:
		set @counter callback

PrintDigitsBackwards:
	op mod digit printValue 10
	op idiv printValue printValue 10
	
	DrawDigitBackwards:
		op sub curX curX charOffset
		op add drawback @counter 11
		op add @counter @counter digit
		jump Draw0 equal digit 0
		jump Draw1 equal digit 1
		jump Draw2 equal digit 2
		jump Draw3 equal digit 3
		jump Draw4 equal digit 4
		jump Draw5 equal digit 5
		jump Draw6 equal digit 6
		jump Draw7 equal digit 7
		jump Draw8 equal digit 8
		jump Draw9 equal digit 9
	
	NextDigitBackwards:
		jump PrintDigitsBackwards greaterThan printValue 0
		set @counter callback

Draw0:
	draw lineRect curX curY charWidth charHeight
	set @counter drawback

Draw1:
	op add rightX curX rightOffset
	draw lineRect rightX curY stroke charHeight
	set @counter drawback

Draw2:
	op add rightX curX rightOffset
	draw lineRect curX midY charWidth stroke
	draw lineRect curX topY charWidth stroke
	draw lineRect curX curY charWidth stroke
	draw lineRect curX curY stroke halfVertH
	draw lineRect rightX midY stroke halfVertH
	set @counter drawback
	
Draw3:
	op add rightX curX rightOffset
	draw lineRect curX midY charWidth stroke
	draw lineRect curX topY charWidth stroke
	draw lineRect curX curY charWidth stroke
	draw lineRect rightX curY stroke charHeight
	set @counter drawback

Draw4:
	op add rightX curX rightOffset
	draw lineRect curX midY charWidth stroke
	draw lineRect curX midY stroke halfRectH
	draw lineRect rightX curY stroke charHeight
	set @counter drawback

Draw5:
	op add rightX curX rightOffset
	draw lineRect curX midY charWidth stroke
	draw lineRect curX topY charWidth stroke
	draw lineRect curX curY charWidth stroke
	draw lineRect curX midY stroke halfVertH
	draw lineRect rightX curY stroke halfVertH
	set @counter drawback
	
Draw6:
	draw lineRect curX curY charWidth halfRectH
	draw lineRect curX topY charWidth stroke
	draw lineRect curX midY stroke halfVertH
	set @counter drawback

Draw7:
	op add rightX curX rightOffset
	draw lineRect curX topY charWidth stroke
	draw lineRect rightX curY stroke charHeight
	set @counter drawback

Draw8:
	draw lineRect curX curY charWidth charHeight
	draw lineRect curX midY charWidth stroke
	set @counter drawback

Draw9:
	op add rightX curX rightOffset
	draw lineRect curX midY charWidth halfRectH
	draw lineRect curX curY charWidth stroke
	draw lineRect rightX curY stroke halfVertH
	set @counter drawback

DrawDot:
	draw lineRect curX curY stroke stroke
	set @counter drawback

DrawMinus:
	draw lineRect curX midY charWidth stroke
	set @counter drawback

DrawPlus:
	draw lineRect curX midY charWidth stroke
	draw lineRect curX curY stroke charHeight
	set @counter drawback

SetDisplay:
	op mul offset displayI 2
	op add @counter @counter offset

	set value0 display
	set @counter displayReturn
	set value1 display
	set @counter displayReturn
	set value2 display
	set @counter displayReturn
	set value3 display
	set @counter displayReturn
	set value4 display
	set @counter displayReturn
	set value5 display
	set @counter displayReturn
	set value6 display
	set @counter displayReturn
	set value7 display
	set @counter displayReturn

GetDisplay:
	op mul offset displayI 2
	op add @counter @counter offset

	set display value0
	set @counter displayReturn
	set display value1
	set @counter displayReturn
	set display value2
	set @counter displayReturn
	set display value3
	set @counter displayReturn
	set display value4
	set @counter displayReturn
	set display value5
	set @counter displayReturn
	set display value6
	set @counter displayReturn
	set display value7
	set @counter displayReturn