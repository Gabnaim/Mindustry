Initialize:
	set maxDigits 16
	set decimals 4
	set maxRows 16

	GetLinks:
		set l 0
		LinkLoop:
			getlink link l
			sensor type link @type
			jump FoundCell equal type @memory-cell
			jump FoundBank equal type @memory-bank
			jump FoundLargeDisplay equal type @large-logic-display
			jump NextLink always
			FoundLargeDisplay:
				set display link
				jump NextLink always
			FoundCell:
				set memory link
				set cap 64
				jump NextLink always
			FoundBank:
				set memory link
				set cap 512
			NextLink:
				op add l l 1
				jump LinkLoop lessThan l @links
	
			jump GetLinks equal memory null
			jump GetLinks equal display null

		EndGetLinks:
	set displaySize 176
	op pow roundMult 10 decimals

	SetColors:
		set bgColor %000000
		set gray %505050
		set fontColor %ffff99
		set indexColor %00ffff
		set imgColor %ffffff

	SetSpacing:
		set colSpacing 4
		set charSpacing 2
		op div halfColSp colSpacing 2

	Preread:
		set prereadStart @time
		set i 0
		set total 0
		set maxIntDigits 0
		set maxFracDigits 0
		PrereadLoop:
			read stored memory i
			jump NextPreread equal stored 0

			CalcIntLength:
				op log10 intDigits stored
				op floor intDigits intDigits
				op add intDigits intDigits 1
			CheckMaxInt:
				jump CalcFractionDigits lessThanEq intDigits maxIntDigits
				set maxIntDigits intDigits
			CalcFractionDigits:
				jump Count equal maxFracDigits decimals
				op mod fraction stored 1
				jump Count equal fraction 0
				set fracDigits 1
				FracCountLoop:
					op mul fraction fraction 10
					op mod digit fraction 1
					jump CheckMaxFrac equal digit 0
					op add fracDigits fracDigits 1
					jump FracCountLoop lessThan fracDigits decimals
			CheckMaxFrac:
				jump Count lessThanEq fracDigits maxFracDigits
				set maxFracDigits fracDigits
			Count:
				op add total total 1
			NextPreread:
				op add i i 1
				jump PrereadLoop lessThan i cap
		op sub prereadTime @time prereadStart

	CalcWidth:
		op add usedChars maxIntDigits maxFracDigits
		# reserve 2 chars for index
		op add charsPerRow usedChars 2

	CalcGrid:
		set columns 2
		op div rows total columns
		op min rows rows maxRows
		
		op div rowOffset displaySize rows
		op floor rowOffset rowOffset
		op div colOffset displaySize columns
		op floor colOffset colOffset 
		op min rowOffset rowOffset colOffset
		op sub colWidth colOffset colSpacing

	CalcFont:
		op mul charHeight rowOffset 0.8
		op floor charHeight charHeight
		op sub rowSpacing rowOffset charHeight
		op div halfRowSp rowSpacing 2

		op div charOffset colWidth charsPerRow
		op floor charOffset charOffset
		op sub charWidth charOffset charSpacing
		op min charWidth charWidth 6
		op add charOffset charWidth charSpacing

		op idiv stroke charWidth 6
		op add stroke stroke 1

	CalcArea:
		op sub topBounds displaySize halfRowSp

		# data positions
		op mul indexWidth charOffset 2
		op mul fractionWidth charOffset maxFracDigits
		op add dotOffset stroke charSpacing
		op sub dotPos colWidth fractionWidth
		op sub intPos dotPos 0
	
	CalcFontDrawParams:
		op mul temp stroke 3
		op sub temp charHeight temp
		op div temp temp 2
		op floor midOffset temp 
		op add midOffset midOffset stroke
		op sub topOffset charHeight stroke
		op sub rightOffset charWidth stroke
		op sub halfRectH charHeight midOffset
		op sub halfVertH halfRectH stroke

	ClearGrid:
		draw clear 0 0 0
		drawflush display
		jump Preread equal total 0

Start:
StartCycle:
	op sub cycleTime @time cycleStart
	set cycleStart @time
	set i 0
	draw stroke stroke

StartCol1:
	set col 0
	set leftBounds 0

StartColumn:
	op sub curY topBounds charHeight
	op sub clearY curY halfRowSp
	set clearX leftBounds
	op add indX leftBounds indexWidth
	op add integerX leftBounds intPos
	op add dotX leftBounds dotPos
	set row 0

StartRow:
	CalcRowPositions:
		op add midY curY midOffset
		op add topY curY topOffset
		
	GetValue:
		read stored memory i
		jump NextItem equal stored 0

	ClearLine:
		op sub clearY curY halfRowSp
		draw col bgColor
		draw rect clearX clearY colWidth rowOffset
		
	PrintIndex:
		draw col indexColor
		set value i
		set curX indX
		op add callback @counter 1
		jump PrintDigitsBackwards always

		draw col fontColor

	PrintInteger:
		op floor value stored
		set curX integerX
		op add callback @counter 1
		jump PrintDigitsBackwards always

	PrintFraction:
		op mod value stored 1
		jump FinishLine equal value 0
		set curX dotX
		draw lineRect curX curY stroke stroke

		op add curX curX dotOffset
		op add callback @counter 1
		jump PrintDigitsForwards always
		
	FinishLine:
		drawflush display
		op add row row 1
		jump NextLine lessThan row rows

	ChangeCol:
		op add col col 1
		jump Done greaterThanEq col columns
		op add leftBounds leftBounds colOffset
		op add i i 1
		jump StartColumn always

	NextLine:
		op sub curY curY rowOffset
	
NextItem:
	drawflush display
	op add i i 1
	jump StartRow lessThan i 64

Done:
	jump Start always

#---------------------------------------------
# Draw Numbers
#---------------------------------------------

PrintDigitsForwards:
	set f 1
	PrintFLoop:
		op mul value value 10
		op floor digit value
		op mod value value 1
		
		DrawDigitForwards:
			op add drawback @counter 11
			op add @counter @counter digit
			jump Draw0 equal digit 0
			jump Draw1 equal digit 1
			jump Draw2 equal digit 2
			jump Draw3 equal digit 3
			jump Draw4 equal digit 4
			jump Draw5 equal digit 5
			jump Draw6 equal digit 6
			jump Draw7 equal digit 7
			jump Draw8 equal digit 8
			jump Draw9 equal digit 9
		
		NextDigitForwards:
			op add f f 1
			jump FinishPrintForward greaterThan f decimals
			op add curX curX charOffset
			jump PrintFLoop notEqual value 0

	FinishPrintForward:
		set @counter callback

PrintDigitsBackwards:
	op mod digit value 10
	op idiv value value 10
	
	DrawDigitBackwards:
		op sub curX curX charOffset
		op add drawback @counter 11
		op add @counter @counter digit
		jump Draw0 equal digit 0
		jump Draw1 equal digit 1
		jump Draw2 equal digit 2
		jump Draw3 equal digit 3
		jump Draw4 equal digit 4
		jump Draw5 equal digit 5
		jump Draw6 equal digit 6
		jump Draw7 equal digit 7
		jump Draw8 equal digit 8
		jump Draw9 equal digit 9
	
	NextDigitBackwards:
		jump PrintDigitsBackwards greaterThan value 0
		set @counter callback

Draw0:
	draw lineRect curX curY charWidth charHeight
	set @counter drawback

Draw1:
	op add rightX curX rightOffset
	draw lineRect rightX curY stroke charHeight
	set @counter drawback

Draw2:
	op add rightX curX rightOffset
	draw lineRect curX midY charWidth stroke
	draw lineRect curX topY charWidth stroke
	draw lineRect curX curY charWidth stroke
	draw lineRect curX curY stroke halfVertH
	draw lineRect rightX midY stroke halfVertH
	set @counter drawback
	
Draw3:
	op add rightX curX rightOffset
	draw lineRect curX midY charWidth stroke
	draw lineRect curX topY charWidth stroke
	draw lineRect curX curY charWidth stroke
	draw lineRect rightX curY stroke charHeight
	set @counter drawback

Draw4:
	op add rightX curX rightOffset
	draw lineRect curX midY charWidth stroke
	draw lineRect curX midY stroke halfRectH
	draw lineRect rightX curY stroke charHeight
	set @counter drawback

Draw5:
	op add rightX curX rightOffset
	draw lineRect curX midY charWidth stroke
	draw lineRect curX topY charWidth stroke
	draw lineRect curX curY charWidth stroke
	draw lineRect curX midY stroke halfVertH
	draw lineRect rightX curY stroke halfVertH
	set @counter drawback
	
Draw6:
	draw lineRect curX curY charWidth halfRectH
	draw lineRect curX topY charWidth stroke
	draw lineRect curX midY stroke halfVertH
	set @counter drawback

Draw7:
	op add rightX curX rightOffset
	draw lineRect curX topY charWidth stroke
	draw lineRect rightX curY stroke charHeight
	set @counter drawback

Draw8:
	draw lineRect curX curY charWidth charHeight
	draw lineRect curX midY charWidth stroke
	set @counter drawback

Draw9:
	op add rightX curX rightOffset
	draw lineRect curX midY charWidth halfRectH
	draw lineRect curX curY charWidth stroke
	draw lineRect rightX curY stroke halfVertH
	set @counter drawback

DrawDot:
	draw lineRect curX curY stroke stroke
	set @counter drawback

DrawMinus:
	draw lineRect curX midY charWidth stroke
	set @counter drawback

DrawPlus:
	draw lineRect curX midY charWidth stroke
	draw lineRect curX curY stroke charHeight
	set @counter drawback
