set name "Display Unit Info"

Initialize:
	UserConfig:
		set skipEmpty true
		set rows 6
		set columns 1
		set flagChars 6
		set charsPerRow 14
		set unitType @poly
		set typeFromCell true
		set UNIT_TYPE_ADDR 0

	GetLinks:
		set l 0
		set lastLinks @links
		set displayI 0
		LinkLoop:
			getlink link l
			sensor type link @type
			jump FoundCell equal type @memory-cell
			jump FoundLargeDisplay equal type @large-logic-display
			jump NextLink always
			FoundLargeDisplay:
				set display link
				op add displayReturn @counter 1
				jump SetDisplay always
				op add displayI displayI 1
				jump NextLink always
			FoundCell:
				set memory link
			NextLink:
				op add l l 1
				jump LinkLoop lessThan l @links

			set displays displayI
			jump GetLinks equal displays 0
			jump EndGetLinks equal typeFromCell false
			jump GetLinks equal memory null
		EndGetLinks:	
			
	Constants:
		set displaySize 176
		set maxDisplays 4
		
	SetColors:
		set bgColor %000000
		set fontColor %ffff99
		set imgColor %ffffff
		set altBgColor %303030

	SetSpacing:
		set colSpacing 4
		set charSpacing 2
		set margin 4

	PrecalcVariables:
		op div halfColSp colSpacing 2
		op div halfDisplay displaySize 2
		op mul itemsPerDisplay rows columns
		op mul maxDataItems itemsPerDisplay displays
		
	CalcGrid:
		op mul margins margin 2
		op sub available displaySize margins
		op div rowOffset available rows
		op floor rowOffset rowOffset
		op div colOffset available columns
		op floor colOffset colOffset 
		op min rowOffset rowOffset colOffset
		op sub colWidth colOffset colSpacing	

	CalcFont:
		op mul charHeight rowOffset 0.8
		op floor charHeight charHeight
		op sub rowSpacing rowOffset charHeight
		op div halfRowSp rowSpacing 2

		op div charOffset colWidth charsPerRow
		op floor charOffset charOffset
		op sub charWidth charOffset charSpacing
		op min charWidth charWidth charHeight
		op max charWidth charWidth 3
		op add charOffset charWidth charSpacing

		op idiv stroke charWidth 6
		op add stroke stroke 1
		op add pctDotSize stroke 1

	CalcArea:
		op sub topBounds displaySize halfRowSp
		set leftBounds margin

	CalcDataPositions:
		set imageSize charHeight
		op div imagePos imageSize 2

		op mul flagWidth charOffset flagChars
		op add flagX leftBounds flagWidth

		op add imageOffset colSpacing imagePos
		op add imageX flagX imageOffset

		op mul carriedWidth charOffset 2
		op add carriedOffset imagePos colSpacing
		op add carriedOffset carriedOffset carriedWidth

		op add carriedX imageX carriedOffset

		op mul healthWidth charOffset 3
		op add healthOffset healthWidth colSpacing
		op add healthX carriedX healthOffset

		set clearX 0
	
	CalcFontParams:
		op mul temp stroke 3
		op sub temp charHeight temp
		op div temp temp 2
		op floor midOffset temp 
		op add midOffset midOffset stroke
		op sub topOffset charHeight stroke
		op sub rightOffset charWidth stroke
		op sub halfRectH charHeight midOffset
		op sub halfVertH halfRectH stroke

	set displayI 0
	ClearAll:
		jump EndClearAll greaterThanEq displayI displays
		op add displayReturn @counter 1
		jump GetDisplay always
		draw clear 0 0 0
		drawflush display
		op add displayI displayI 1
		jump ClearAll lessThan displayI displays
	EndClearAll:

Start:
	op sub cycleTime @time cycleStart
	set cycleStart @time

	jump GetLinks notEqual @links lastLinks
	
	jump StartUnitBind equal typeFromCell false
	read unitTypeId memory UNIT_TYPE_ADDR
	lookup unit unitType unitTypeId
	
StartUnitBind:
	set units 0
	set dataItems 0
	jump BindFirst notEqual unitType lastUnitType
	jump StartDisplay notEqual firstUnit null 

	BindFirst:
		ubind unitType
		jump Done equal @unit null
		set firstUnit @unit
		sensor maxHealth @unit @maxHealth
		set lastUnitType unitType

StartDisplay:
	op add temp dataItems 1
	op idiv displayI temp rows

	op add displayReturn @counter 1
	jump GetDisplay always

StartCol1:
	draw stroke stroke
	set col 0

StartColumn:
	op sub curY topBounds charHeight
	op sub clearY curY halfRowSp

	op sub clearX leftBounds margin
	op add flagX leftBounds flagWidth
	op add imageX flagX imageOffset
	op add carriedX imageX carriedOffset
	op add healthX carriedX healthOffset

	set row 0

StartRow:
	BindUnit:
		jump ProcessUnit equal units 0
		ubind unitType
		jump Done equal firstUnit @unit

	ProcessUnit:
		sensor firstDead firstUnit @dead
		jump ReadInfo equal firstDead false
		set firstUnit null
		jump Start always

	ReadInfo:
		sensor flag @unit @flag
		set data flag
		sensor carried @unit @totalItems
		op add data data carried

	ReadHealth:
		sensor health @unit @health
		jump CheckSkip equal health maxHealth
		op mul health health 100
		op idiv healthPct health maxHealth
	
	CheckSkip:
		jump UseThis notEqual data 0
		jump Skip equal skipEmpty true

	UseThis:
		op add dataItems dataItems 1

	CalcRowPositions:	
		op add midY curY midOffset
		op add topY curY topOffset

	ClearLine:
		op sub clearY curY halfRowSp
		op mod even row 2
		draw col bgColor
		jump DrawClear equal even 0
			draw col altBgColor
		DrawClear:
			draw rect clearX clearY displaySize rowOffset

	draw col fontColor

	PrintCarried:
		sensor carried @unit @totalItems
		jump PrintHealth equal carried 0
		sensor material @unit @firstItem
		draw col imgColor
		draw image imageX midY material imageSize

		draw col fontColor

		set printValue carried
		set curX carriedX
		op add callback @counter 1
		jump PrintFromBack always

	PrintHealth:
		jump PrintFlag equal health maxHealth
	
		DrawPercent:
			op sub curX healthX charOffset
			op add rightX curX rightOffset
			op add pctBottY curY 1
			op add pctTopY curY charHeight
			op add pctBottX curX stroke
			draw line pctBottX pctBottY rightX pctTopY
			draw rect curX topY pctDotSize pctDotSize 
			draw rect rightX curY pctDotSize pctDotSize 

		set printValue healthPct
		op add callback @counter 1
		jump PrintFromBack always

	PrintFlag:
		jump FinishLine equal flag 0
		draw col fontColor
		set curX flagX
		set printValue flag
		op add callback @counter 1
		jump PrintFromBack always
		
	FinishLine:
		drawflush display
		op add row row 1
	
NextItem:
	op add units units 1
	jump Skip equal dataItems maxDataItems
	jump ChangeCol equal row rows

NextLine:
	op sub curY curY rowOffset
	drawflush display
	jump StartRow always

ChangeCol:
	op add col col 1
	drawflush display
	jump StartDisplay greaterThanEq col columns
	op add leftBounds leftBounds colOffset
	jump StartColumn always

Skip:
	op add units units 1
	jump StartRow always

Done:
	set total units
	jump ClearEmptyArea greaterThan row 0
	set clearY displaySize
	ClearEmptyArea:
		draw col bgColor
		draw rect leftBounds 0 colOffset clearY
		drawflush display
	ClearCols:
		op add col col 1
		jump ClearDisplays equal col columns
		op add clearX clearX colOffset
		op sub clearWidth displaySize clearX
		draw rect clearX 0 clearWidth displaySize
		drawflush display

	ClearDisplays:
		op add displayI displayI 1
		jump Start greaterThanEq displayI displays
		op add displayReturn @counter 1
		jump GetDisplay always
		draw clear 0 0 0
		drawflush display	
		jump ClearDisplays always
	jump Start always


#---------------------------------------------
# Draw Numbers
#---------------------------------------------
PrintFromBack:
	jump EndPrintFromBack lessThan printValue 0
	
	PrintFromBackLoop:
		op mod digit printValue 10
		op idiv printValue printValue 10
		
		DrawDigitBackwards:
			op sub curX curX charOffset
			op add drawback @counter 11
			op add @counter @counter digit
			jump Draw0 equal digit 0
			jump Draw1 equal digit 1
			jump Draw2 equal digit 2
			jump Draw3 equal digit 3
			jump Draw4 equal digit 4
			jump Draw5 equal digit 5
			jump Draw6 equal digit 6
			jump Draw7 equal digit 7
			jump Draw8 equal digit 8
			jump Draw9 equal digit 9
		
		NextFromBack:
			jump PrintFromBackLoop greaterThan printValue 0
	
		EndPrintFromBack:
			set @counter callback

Draw0:
	draw lineRect curX curY charWidth charHeight
	set @counter drawback

Draw1:
	op add rightX curX rightOffset
	draw lineRect rightX curY stroke charHeight
	set @counter drawback

Draw2:
	op add rightX curX rightOffset
	draw lineRect curX midY charWidth stroke
	draw lineRect curX topY charWidth stroke
	draw lineRect curX curY charWidth stroke
	draw lineRect curX curY stroke halfVertH
	draw lineRect rightX midY stroke halfVertH
	set @counter drawback
	
Draw3:
	op add rightX curX rightOffset
	draw lineRect curX midY charWidth stroke
	draw lineRect curX topY charWidth stroke
	draw lineRect curX curY charWidth stroke
	draw lineRect rightX curY stroke charHeight
	set @counter drawback

Draw4:
	op add rightX curX rightOffset
	draw lineRect curX midY charWidth stroke
	draw lineRect curX midY stroke halfRectH
	draw lineRect rightX curY stroke charHeight
	set @counter drawback

Draw5:
	op add rightX curX rightOffset
	draw lineRect curX midY charWidth stroke
	draw lineRect curX topY charWidth stroke
	draw lineRect curX curY charWidth stroke
	draw lineRect curX midY stroke halfVertH
	draw lineRect rightX curY stroke halfVertH
	set @counter drawback
	
Draw6:
	draw lineRect curX curY charWidth halfRectH
	draw lineRect curX topY charWidth stroke
	draw lineRect curX midY stroke halfVertH
	set @counter drawback

Draw7:
	op add rightX curX rightOffset
	draw lineRect curX topY charWidth stroke
	draw lineRect rightX curY stroke charHeight
	set @counter drawback

Draw8:
	draw lineRect curX curY charWidth charHeight
	draw lineRect curX midY charWidth stroke
	set @counter drawback

Draw9:
	op add rightX curX rightOffset
	draw lineRect curX midY charWidth halfRectH
	draw lineRect curX curY charWidth stroke
	draw lineRect rightX curY stroke halfVertH
	set @counter drawback

DrawPct:
	op add rightX curX rightOffset
	draw line curX curY rightX topY
	draw rect curX topY stroke stroke 
	draw rect rightX curY stroke stroke 
	set @counter drawback

SetDisplay:
	op mul offset displayI 2
	op add @counter @counter offset

	set value0 display
	set @counter displayReturn
	set value1 display
	set @counter displayReturn
	set value2 display
	set @counter displayReturn
	set value3 display
	set @counter displayReturn
	
GetDisplay:
	op mul offset displayI 2
	op add @counter @counter offset

	set display value0
	set @counter displayReturn
	set display value1
	set @counter displayReturn
	set display value2
	set @counter displayReturn
	set display value3
	set @counter displayReturn