Initialize:
	set quad 1
	set refreshMs 20000
	
	GetLinks:
		jump GetLinks lessThan @links 2
		set i 0
		LinkLoop:
			getlink link i
			sensor type link @type
			jump FoundDisplay equal type @logic-display
			jump FoundLargeDisplay equal type @large-logic-display
			sensor cap link @itemCapacity
			jump NextLink lessThan cap 10
			FoundContainer:
				set source link
				jump NextLink always
			FoundDisplay:
				set display link
				set displaySize 80
				set margin 0
				jump NextLink always
			FoundLargeDisplay:
				set display link
				set displaySize 176
				set margin 6
			NextLink:
				op add i i 1
				jump LinkLoop lessThan i @links
			jump GetLinks equal display null
			jump GetLinks equal source null

	CalcFont:
		jump CalcSmallFont equal displaySize 80
		CalcLargeFont:
			set charHeight 16
			set charWidth 10
			set stroke 2
			set charSpacing 2
			set rowSpacing 4
			set colSpacing 4
			jump EndCalcFont always
		CalcSmallFont:
			set charHeight 8
			set charWidth 4
			set stroke 1
			set charSpacing 2
			set rowSpacing 2 
			set colSpacing 2
		EndCalcFont:
	
	CalcQuadrants:
		op mul maxI quad 4
		op sub minI maxI 4
		jump Quad2 equal quad 2
		jump Quad3 equal quad 3
		jump Quad4 equal quad 4
		Quad1:
			set quadCol 1
			set quadRow 2
			jump CalcArea always
		Quad2:
			set quadCol 1
			set quadRow 1
			jump CalcArea always
		Quad3:
			set quadCol 2
			set quadRow 2
			jump CalcArea always
		Quad4:
			set quadCol 2
			set quadRow 1
	
	CalcArea:
		op div bgSize displaySize 2
		op mul bgRight quadCol bgSize
		op sub bgLeft bgRight bgSize
		op mul bgTop quadRow bgSize
		
		op div halfColSp colSpacing 2
		op div halfRowSp rowSpacing 2

	GetHorizontalBounds:
		jump Col2Bounds equal quadCol 2
		Col1Bounds:
			op add leftBounds bgLeft margin
			op sub rightBounds bgRight halfColSp
			jump EndHorizontalBounds always
		Col2Bounds:
			op add leftBounds bgLeft halfColSp
			op sub rightBounds bgRight margin
		EndHorizontalBounds:

	GetVerticalBounds:
		jump Row2Bounds equal quadRow 2
		Row1Bounds:
			op sub topBounds bgTop halfRowSp
			op sub marginClearY bgTop bgSize
			op add marginClearHeight margin rowSpacing
			jump EndVerticalBounds always
		Row2Bounds:
			op sub topBounds bgTop margin
			op sub topBounds topBounds rowSpacing
			set marginClearY topBounds
			op sub marginClearHeight bgTop marginClearY
		EndVerticalBounds:
		
	CalcFontSizeParams:
		op mul temp stroke 3
		op sub temp charHeight temp
		op div temp temp 2
		op floor midOffset temp 
		op add midOffset midOffset stroke
		op sub topOffset charHeight stroke
		op sub rightOffset charWidth stroke
		op sub halfRectH charHeight midOffset
		op sub halfVertH halfRectH stroke
		op div halfRowSp rowSpacing 2
		op add charOffset charWidth charSpacing
		op add rowOffset charHeight rowSpacing
		
	SetColors:
		set bgColor %000000
		set fontColor %ffff99
		set imgColor %ffffff

	CalcImageParams:
		op add imageSize charHeight 0
		op idiv imagePos imageSize 2
		op add imageX leftBounds imagePos
		op add clearX leftBounds imageSize
		op sub clearWidth bgRight clearX
		op sub imgClearWidth clearX bgLeft

Refresh:
	set row 0
	set i minI
	set stock null
	op sub imageY topBounds imagePos
	op sub rowClearY topBounds charHeight
	RefreshLoop:
		ClearStockCache:
			op add cacheReturn @counter 1
			jump SetLastStock always
		DrawImage:
			lookup item material i
			draw col bgColor 
			draw rect bgLeft rowClearY imgClearWidth rowOffset
			draw col imgColor
			draw image imageX imageY material imageSize
		RefreshNext:
			op sub imageY imageY rowOffset
			op sub rowClearY rowClearY rowOffset
			op add row row 1
			op add i i 1
			jump RefreshLoop lessThan row 4

	ClearMargin:
		draw col bgColor
		draw rect bgLeft marginClearY bgSize marginClearHeight
		draw stroke stroke

	FinishRefresh:
		drawflush display
		set lastRefresh @time
		jump StartCycle always
		
Start:
	set cycleStart @time
	op sub sinceRefresh @time lastRefresh
	jump Refresh greaterThan sinceRefresh refreshMs

StartCycle:
	set i minI
	set row 0
	op sub curY topBounds charHeight
	
StartLine:
	GetMaterial:
		lookup item material i
		sensor stock source material

	CheckChanged:
		op add cacheReturn @counter 1
		jump GetLastStock always
		jump NextLine strictEqual lastStock stock

	SaveStock:
		op add cacheReturn @counter 1
		jump SetLastStock always

	CalcLineDrawParams:
		set curX rightBounds
		op add midY curY midOffset
		op add topY curY topOffset

	ClearLine:
		draw col bgColor
		draw rect clearX curY clearWidth rowOffset
		draw col fontColor

	PrintDigits:
		op mod digit stock 10
		op idiv stock stock 10
		
	DrawDigit:
		op sub curX curX charOffset
		op add @counter @counter digit
		jump Draw0 equal digit 0
		jump Draw1 equal digit 1
		jump Draw2 equal digit 2
		jump Draw3 equal digit 3
		jump Draw4 equal digit 4
		jump Draw5 equal digit 5
		jump Draw6 equal digit 6
		jump Draw7 equal digit 7
		jump Draw8 equal digit 8
		jump Draw9 equal digit 9
	
	NextDigit:
		jump PrintDigits greaterThan stock 0

	FinishLine:
		drawflush display
	
	NextLine:
		op sub curY curY rowOffset
		op add row row 1
		
NextItem:
	op add i i 1
	jump StartLine lessThan i maxI

Done:
	op sub cycleTime @time cycleStart
	jump Start always

#---------------------------------------------
# Draw Numbers
#---------------------------------------------
Draw0:
	draw lineRect curX curY charWidth charHeight
	jump NextDigit always

Draw1:
	op add rightX curX rightOffset
	draw lineRect rightX curY stroke charHeight
	jump NextDigit always

Draw2:
	op add rightX curX rightOffset
	draw lineRect curX midY charWidth stroke
	draw lineRect curX topY charWidth stroke
	draw lineRect curX curY charWidth stroke
	draw lineRect curX curY stroke halfVertH
	draw lineRect rightX midY stroke halfVertH
	jump NextDigit always
	
Draw3:
	op add rightX curX rightOffset
	draw lineRect curX midY charWidth stroke
	draw lineRect curX topY charWidth stroke
	draw lineRect curX curY charWidth stroke
	draw lineRect rightX curY stroke charHeight
	jump NextDigit always

Draw4:
	op add rightX curX rightOffset
	draw lineRect curX midY charWidth stroke
	draw lineRect curX midY stroke halfRectH
	draw lineRect rightX curY stroke charHeight
	jump NextDigit always

Draw5:
	op add rightX curX rightOffset
	draw lineRect curX midY charWidth stroke
	draw lineRect curX topY charWidth stroke
	draw lineRect curX curY charWidth stroke
	draw lineRect curX midY stroke halfVertH
	draw lineRect rightX curY stroke halfVertH
	jump NextDigit always
	
Draw6:
	draw lineRect curX curY charWidth halfRectH
	draw lineRect curX topY charWidth stroke
	draw lineRect curX midY stroke halfVertH
	jump NextDigit always

Draw7:
	op add rightX curX rightOffset
	draw lineRect curX topY charWidth stroke
	draw lineRect rightX curY stroke charHeight
	jump NextDigit always

Draw8:
	draw lineRect curX curY charWidth charHeight
	draw lineRect curX midY charWidth stroke
	jump NextDigit always

Draw9:
	op add rightX curX rightOffset
	draw lineRect curX midY charWidth halfRectH
	draw lineRect curX curY charWidth stroke
	draw lineRect rightX curY stroke halfVertH
	jump NextDigit always

#----------------------------------------------------
# Stock Cache
#----------------------------------------------------
SetLastStock:
	op mul offset row 2
	op add @counter @counter offset

	set value0 stock
	set @counter cacheReturn
	set value1 stock
	set @counter cacheReturn
	set value2 stock
	set @counter cacheReturn
	set value3 stock
	set @counter cacheReturn

GetLastStock:
	op mul offset row 2
	op add @counter @counter offset

	set lastStock value0
	set @counter cacheReturn
	set lastStock value1
	set @counter cacheReturn
	set lastStock value2
	set @counter cacheReturn
	set lastStock value3
	set @counter cacheReturn