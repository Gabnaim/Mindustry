```arm
set i 0
getlink core 1

loop:
lookup item it i
sensor val core it
set x 37
op mul y i 6
op add y1 y 1
op add y3 y 3
draw color 0 0 0 255 0 0
draw rect 0 y 40 6 0 0
draw color 255 255 255 255 0 0
draw image 3 y3 it 6 0 0

getDigit:
op mod digit val 10
op idiv val val 10
draw rect x y 3 5 0 0
draw color 0 0 0 255 0 0

op mul offset digit 5
op add @counter @counter offset
op add x1 x 1
draw rect x1 y1 1 3 0 0
jump finalize always 0 0
noop
noop
draw rect x y 2 5 0 0
jump finalize always 0 0
noop
noop
noop
draw rect x y3 2 1 0 0
op add x1 x 1
draw rect x1 y1 2 1 0 0
jump finalize always 0 0
noop
draw rect x y1 2 1 0 0
draw rect x y3 2 1 0 0
jump finalize always 0 0
noop
noop
draw rect x y 2 2 0 0
op add x1 x 1
draw rect x1 y3 1 2 0 0
jump finalize always 0 0
noop
draw rect x y1 2 1 0 0
op add x1 x 1
draw rect x1 y3 2 1 0 0
jump finalize always 0 0
noop
op add x1 x 1
draw rect x1 y1 1 1 0 0
draw rect x1 y3 2 1 0 0
jump finalize always 0 0
noop
draw rect x y 2 4 0 0
jump finalize always 0 0
noop
noop
noop
op add x1 x 1
draw rect x1 y1 1 1 0 0
draw rect x1 y3 1 1 0 0
jump finalize always 0 0
noop
draw rect x y1 2 1 0 0
op add x1 x 1
draw rect x1 y3 1 1 0 0

finalize:
op sub x x 4
draw color 255 255 255 255 0 0
jump 12 greaterThan val 0
drawflush display1
op add i i 1
jump loop lessThan i 8
```