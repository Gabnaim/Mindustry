set sourceFile "Low Usage Feeder.txt"
# Designed to feed two items with one unit at a slow rate
# For example phase fabric and silicon to a dropTarget,
# or thorium and phase fabric to a container supplying
# RTGs and overdrive projector

Initialize:
	set unitType @flare
	op shl procId @thisx 10
	op add procId procId @thisy
	set material1 @thorium
	set material2 @phase-fabric
	set stockLevel1 120
	set stockLevel2 40
	set sourceMin 200
	set dropRange 7

	GetDropTarget:
		set l 0
		LinkLoop:
			getlink link l
			sensor type link @type
			sensor buildingCap link @itemCapacity
			jump Found greaterThanEq buildingCap 10
		NextLink:
			op add l l 1
			jump LinkLoop lessThan l @links
			jump GetDropTarget always
		Found:
			set dropTarget link
	
	GetDropCoords:
		sensor dropX dropTarget @x
		sensor dropY dropTarget @y
		sensor dropCap dropTarget @itemCapacity
	
	GetStartInfo:
		ubind unitType
		jump GetStartInfo equal @unit null
		sensor cap @unit @itemCapacity
		sensor range @unit @range
		ulocate building core false 0 sourceX sourceY sourceFound source

Start:
CheckLevels:
	sensor sourceLevel1 source material1
	op lessThan notEnough1 sourceLevel1 sourceMin
	sensor dropLevel1 dropTarget material1
	op greaterThanEq full1 dropLevel1 stockLevel1
	op or skip1 notEnough1 full1

	sensor sourceLevel2 source material2
	op lessThan notEnough2 sourceLevel2 sourceMin
	sensor dropLevel2 dropTarget material2
	op greaterThanEq full2 dropLevel2 stockLevel2
	op or skip2 notEnough2 full2

	op and skipBoth skip1 skip2
	jump Start equal skipBoth true
	jump Check2 equal skip1 true
	jump Check1 equal skip2 true

	op div stockRate1 dropLevel1 stockLevel1
	op div stockRate2 dropLevel2 stockLevel2
	jump Check2 lessThan stockRate2 stockRate1

	Check1:
		set material material1
		set dropLevel dropLevel1
		set stockLevel stockLevel1
		jump CalcNeeded always

	Check2:
		set material material2
		set dropLevel dropLevel2
		set stockLevel stockLevel2

	CalcNeeded:
		op sub needed stockLevel dropLevel
		op min amount needed cap
		jump Start lessThanEq amount 0

FeedDrop:
CheckMule:
	jump FindMule equal mule null
	sensor muleDead mule @dead
	jump StartRun equal muleDead false
	
FindMule:
	ubind unitType
	jump Start equal @unit null
	sensor unitDead @unit @dead
	jump FindMule equal unitDead true

	sensor unitFlag @unit @flag
	jump UseMule equal unitFlag procId

FlagMule:
	jump FindMule notEqual unitFlag 0
	ucontrol flag procId

UseMule:
	set mule @unit
	
StartRun:
	sensor carried mule @totalItems
	sensor carriedMat mule @firstItem
	jump Pickup equal carried 0
	jump DropItems always
	
Pickup:
	ucontrol within sourceX sourceY dropRange isNearSource
	jump PickupLoop equal isNearSource true
	ucontrol approach sourceX sourceY dropRange
	ucontrol boost true
	jump Start always

	PickupLoop:
		set pickupI 0
		ucontrol boost false
		LoopUntilFull:
			ucontrol itemTake source material cap
			sensor carried mule @totalItems
			jump DropItems equal carried cap

			op add pickupI pickupI 1
			jump LoopUntilFull lessThan pickupI 100 
			# make it work when the core was upgraded
			ulocate building core false 0 sourceX sourceY sourceFound source

DropItems:
	ucontrol within dropX dropY dropRange isNearDrop
	jump DropLoop equal isNearDrop true
	ucontrol boost true
	ucontrol approach dropX dropY dropRange
	jump Start always

	DropLoop:
		set dropI 0
		ucontrol boost false
		sensor carried mule @totalItems
		LoopUntilEmpty:
			ucontrol itemDrop dropTarget carried
			sensor carried @unit @totalItems
			jump Pickup equal carried 0
			op add dropI dropI 1
			jump LoopUntilEmpty lessThan dropI 100 

FinishRun:
	jump Start always