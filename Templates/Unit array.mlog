Initialize:
	set status "INITIALIZE"
	set unitType @flare
	set maxUnits 4
	
	set maxDistance 100 # do not bind if further away

	# How long to wait before releasing units
	# If we idle often set it longer
	set releaseWaitSecs 30

	set error " "

	set switch switch1
	jump NoSwitch equal switch null

	set arrayLength 24
	jump TooMany greaterThan maxUnits arrayLength

	GetId:
		op shl procId @thisx 9
		op add procId procId @thisy

	op sub releaseX @thisx 2
	op sub releaseY @thisy 5

	op add nearX @thisx 20
	op add nearY @thisy 0
	op add farX @thisx 35
	op add farY @thisy 0

	op mul releaseWaitMs releaseWaitSecs 1000
	sensor lastActive switch @enabled

#-------------------------------------------------
Preflag:
#-------------------------------------------------
	set flagStart @time
	Count:
		set status "COUNT"
		set flagged 0
		set free 0
		set units 0
		set tooFar 0
		
		ubind unitType
		jump NoUnits equal @unit null
		set firstUnit @unit
		jump CountProcess always
		
		CountLoop:
			ubind unitType
			jump FinishCount equal firstUnit @unit
	
		CountProcess:
			sensor isDead @unit @dead
			jump CountLoop equal isDead true
			sensor flag @unit @flag
			jump CountFree equal flag 0
			jump NextCount notEqual flag procId
			jump CountFlagged greaterThanEq flagged maxUnits

			SaveFlagged: 
				set unit @unit
				set arrayIndex flagged
				op add arrayReturn @counter 1
				jump ArraySet always
	
			CountFlagged:
				op add flagged flagged 1
				jump NextCount always
	
			CountFree:
				op add free free 1
		
		NextCount:
			op add units units 1
			jump CountLoop always
	
		FinishCount:
			jump FlagDone equal flagged maxUnits
			jump Unflag greaterThan flagged maxUnits
	
	Flag:
		jump FlagDone equal free 0

		set status "FLAG"
		ubind unitType
		set firstUnit @unit
		jump FlagProcess always
	
		FlagLoop:
			ubind unitType
			jump FinishFlag equal firstUnit @unit
	
		FlagProcess:
			sensor isDead @unit @dead
			jump FlagLoop equal isDead true
			sensor flag @unit @flag
			jump NextFlag notEqual flag 0
	
		ProcessFree: 
			sensor controlled @unit @controlled
			jump NextFlag greaterThanEq controlled 2
	
			CheckDistance:
				sensor x @unit @x
				sensor y @unit @y
				op sub xDiff @thisx x
				op sub yDiff @thisy y
				op len distance xDiff yDiff
				jump UnitTooFar greaterThan distance maxDistance
	
			FlagUnit:
				ucontrol flag procId
				set arrayIndex flagged
				set unit @unit
				op add arrayReturn @counter 1
				jump ArraySet always
				op add flagged flagged 1

		UnitTooFar:
			op add tooFar tooFar 1
		
		NextFlag:
			jump FlagLoop lessThan flagged maxUnits
		
		FinishFlag:
			jump FlagDone equal flagged maxUnits
			jump NoUnits equal flagged 0
			jump FlagDone always
	
	Unflag:
		set status "UNFLAG"		

		ubind unitType
		set firstUnit @unit
		jump UnflagProcess always
	
		UnflagLoop:
			ubind unitType
			jump FlagDone equal firstUnit @unit
	
		UnflagProcess:
			sensor isDead @unit @dead
			jump UnflagLoop equal isDead true
			sensor flag @unit @flag
			jump NextUnflag notEqual flag procId
	
		UnflagUnit:
			ucontrol flag 0
			op sub flagged flagged 1
		
		NextUnflag:
			jump UnflagLoop greaterThan flagged maxUnits
		
		FlagDone:
			op sub flagTime @time flagStart
			jump Preflag equal maxUnits 0
			jump NoUnits equal flagged 0
			
	GetStartUnit:
		set arrayIndex 0
		op add arrayReturn @counter 1
		jump ArrayGet always
		jump Preflag equal unit null
		
		ubind unit
		ucontrol approach @thisx @thisy 5

	set status "START"
	set error " "
	set arrayIndex 0
	set tooFar 0
	set releaseStart @time
	sensor lastActive switch @enabled

#--------------------------------------------------
MainLoop:
#--------------------------------------------------

Start:
	sensor active switch @enabled
	jump ActiveChanged notEqual active lastActive
	jump Reset equal active false
	op sub releaseWait @time releaseStart
	jump Reset greaterThanEq releaseWait releaseWaitMs

CheckUnit:
	op add arrayReturn @counter 1
	jump ArrayGet always

	jump Rebind equal unit null
	sensor isDead unit @dead
	jump Rebind equal isDead true
	sensor flag unit @flag
	jump Reflag equal flag 0
	jump Rebind notEqual flag procId
	jump DoStuff always

Rebind:
FindRecruit:
	set status "FIND"

	ubind unitType
	jump NoUnits equal @unit null
	set tooFar 0
	set firstUnit @unit
	jump ProcessRecruit always

	FindLoop:
		ubind unitType
		jump NoReserves equal firstUnit @unit
		sensor isFirstDead firstUnit @dead
		jump NoReserves equal isFirstDead true
	
	ProcessRecruit:
		sensor isDead @unit @dead
		jump FindLoop equal isDead true

		sensor flag @unit @flag
		jump FindLoop notEqual flag 0

		sensor controlled @unit @controlled
		jump FindLoop greaterThanEq controlled 2

		CheckRecruitDistance:
			sensor x @unit @x
			sensor y @unit @y
			op sub xDiff @thisx x
			op sub yDiff @thisy y
			op len distance xDiff yDiff
			jump Reflag lessThanEq distance maxDistance
			op add tooFar tooFar 1
		jump FindLoop always
	
	Reflag:
		ucontrol flag procId
		set unit @unit
		op add arrayReturn @counter 1
		jump ArraySet always
		op add flagged flagged 1
		jump FindDone always
	
	NoReserves:
		jump Next equal unit null
		set unit null
		op add arrayReturn @counter 1
		jump ArraySet always
		jump Next always

	FindDone:

DoStuff:	
	ubind unit
	set releaseStart @time
	set status "MOVING"

	MoveNear:
		ucontrol approach nearX nearY 3
		ucontrol within nearX nearY 4 isNear
		jump Next equal isNear false

	MoveFar:
		ucontrol approach farX farY 3
		ucontrol within farX farY 4 isFar
		jump MoveNear equal isFar true

Next:
	op add arrayIndex arrayIndex 1
	jump Start lessThan arrayIndex maxUnits

FinishGroup:
	set arrayIndex 0
	jump Start always

#--------------------------------------------------
WrapUp:
#--------------------------------------------------

ActiveChanged:
	set lastActive active
	jump Initialize equal active true
	jump Stop always

Reset:
	jump Start equal status "IDLE"
	jump Release equal status "RELEASING"

Stop:
	set status "STOPPING"
	set arrayIndex 0
	StopLoop:
		op add arrayReturn @counter 1
		jump ArrayGet always
		jump StopNext equal unit null
		
		ubind unit
		ucontrol stop

		StopNext:
			op add arrayIndex arrayIndex 1
			jump StopLoop lessThan arrayIndex maxUnits

Release:
	set status "RELEASING"
	set arrayIndex 0
	ReleaseLoop:
		op add arrayReturn @counter 1
		jump ArrayGet always
		jump ReleaseNext equal unit null
		
		ubind unit
		ucontrol flag 0
		ucontrol move releaseX releaseY

		ReleaseNext:
			op add arrayIndex arrayIndex 1
			jump ReleaseLoop lessThan arrayIndex maxUnits
		
	FinishRelease:
		set status "IDLE"
		set releaseStart @time
		jump Start always

#-------------------------------------------------
Errors:
#-------------------------------------------------
TooMany:
	set error "Max 24 units supported"
	jump Error always
	
NoSwitch:
	set error "Need switch"
	jump Error always

NoUnits:
	jump TooFar greaterThan tooFar 0
	set error "No free units"
	jump Preflag always

TooFar:
	set error "Some units are too far"
	jump Preflag always

Error:
	# idle here until user looks at error and restarts
	jump Error always

#-------------------------------------------------
Array:
#-------------------------------------------------
ArraySet:
	op mul offset arrayIndex 2
	op add @counter @counter offset

	set unit0 unit
	set @counter arrayReturn
	set unit1 unit
	set @counter arrayReturn
	set unit2 unit
	set @counter arrayReturn
	set unit3 unit
	set @counter arrayReturn
	set unit4 unit
	set @counter arrayReturn
	set unit5 unit
	set @counter arrayReturn
	set unit6 unit
	set @counter arrayReturn
	set unit7 unit
	set @counter arrayReturn
	set unit8 unit
	set @counter arrayReturn
	set unit9 unit
	set @counter arrayReturn

	set unit10 unit
	set @counter arrayReturn
	set unit11 unit
	set @counter arrayReturn
	set unit12 unit
	set @counter arrayReturn
	set unit13 unit
	set @counter arrayReturn
	set unit14 unit
	set @counter arrayReturn
	set unit15 unit
	set @counter arrayReturn
	set unit16 unit
	set @counter arrayReturn
	set unit17 unit
	set @counter arrayReturn
	set unit18 unit
	set @counter arrayReturn
	set unit19 unit
	set @counter arrayReturn

	set unit20 unit
	set @counter arrayReturn
	set unit21 unit
	set @counter arrayReturn
	set unit22 unit
	set @counter arrayReturn
	set unit23 unit
	set @counter arrayReturn

ArrayGet:
	op mul offset arrayIndex 2
	op add @counter @counter offset

	set unit unit0
	set @counter arrayReturn
	set unit unit1
	set @counter arrayReturn
	set unit unit2
	set @counter arrayReturn
	set unit unit3
	set @counter arrayReturn
	set unit unit4
	set @counter arrayReturn
	set unit unit5
	set @counter arrayReturn
	set unit unit6
	set @counter arrayReturn
	set unit unit7
	set @counter arrayReturn
	set unit unit8
	set @counter arrayReturn
	set unit unit9
	set @counter arrayReturn

	set unit unit10
	set @counter arrayReturn
	set unit unit11
	set @counter arrayReturn
	set unit unit12
	set @counter arrayReturn
	set unit unit13
	set @counter arrayReturn
	set unit unit14
	set @counter arrayReturn
	set unit unit15
	set @counter arrayReturn
	set unit unit16
	set @counter arrayReturn
	set unit unit17
	set @counter arrayReturn
	set unit unit18
	set @counter arrayReturn
	set unit unit19
	set @counter arrayReturn

	set unit unit20
	set @counter arrayReturn
	set unit unit21
	set @counter arrayReturn
	set unit unit22
	set @counter arrayReturn
	set unit unit23
	set @counter arrayReturn

# This is only called when I want to see which units
# are stored in the array. Remove for release code
DebugMove:
	jump Start equal status "IDLE"
	set status "DEBUGMOVE"
	set arrayIndex 0
	DebugLoop:
		op add arrayReturn @counter 1
		jump ArrayGet always
		jump DebugNext equal unit null
		
		ubind unit
		sensor x unit @x
		sensor y unit @y
		op add debugX x 10
		op add debugY y 2
		ucontrol move debugX debugY

		DebugNext:
			op add arrayIndex arrayIndex 1
			jump DebugLoop lessThan arrayIndex maxUnits
		set status "IDLE"
		jump Start always