Initialize:
	set unitType @poly
	set maxUnits 6
	set extraBits 0 #extra information stored in flag
	set releaseSecs 20 # wait secs before releasing when idle
	
	GetLinks:
		set switch switch1
		jump GetLinks equal switch null

	op shl procId @thisx 10 # first 10 bits for x
	op add procId procId @thisy # second 10 bits for y

	op mul waitTicks releaseSecs 60

	set status "NONE"
	set error ""

#################################################################
# Flagging 
#################################################################

FlagStart:
	sensor active switch @enabled
	jump Reset equal active false
	set lastActive active
	
Count:
	set status "COUNTING"
	set i 0
	set flagged 0
	set free 0
	set firstUnit null
	CountLoop:
		ubind unitType
		jump Start equal @unit null
		sensor isDead @unit @dead
		jump Start equal isDead true
	
		jump FinishCount equal firstUnit @unit
		jump CountProcess notEqual firstUnit null
		set firstUnit @unit
	
	CountProcess:
		sensor flag @unit @flag
		op shr unitProcId flag extraBits
		jump CountFlagged equal unitProcId procId
		jump CountFree equal flag 0
		jump NextCount always
		
	CountFlagged:
		op add flagged flagged 1
		jump NextCount always

	CountFree:
		op add free free 1
	
	NextCount:
		op add i i 1
		jump CountLoop always

	FinishCount:
		set totalFlagged flagged
		set totalFree free
		set totalUnits i

SelectFlagAction:
	jump Flag lessThan totalFlagged maxUnits
	jump Unflag greaterThan totalFlagged maxUnits
	jump DoneFlagging always

Flag:
	op sub neededFlags maxUnits totalFlagged
	op min neededFlags neededFlags totalFree
	jump DoneFlagging lessThanEq neededFlags 0

	set status "FLAGGING"
	set usedFlag procId
	set grabbedFlag 0
	jump RunFlagLoop always

Unflag:
	op sub neededFlags totalFlagged maxUnits
	jump DoneFlagging lessThanEq neededFlags 0
	set status "UNFLAGGING"
	set usedFlag 0
	set grabbedFlag procId

RunFlagLoop:
	set flagged 0
	set firstUnit null
	FlagLoop:
		ubind unitType
		jump Start equal @unit null
		sensor isDead @unit @dead
		jump FlagLoop equal isDead true
	
		jump DoneFlagging equal firstUnit @unit
		jump DoneFlagging greaterThanEq flagged neededFlags
		jump FlagProcess notEqual firstUnit null
		set firstUnit @unit
	
	FlagProcess:
		sensor flag @unit @flag
		jump FlagLoop equal flag usedFlag
		op shr unitProcId flag extraBits
		jump FlagLoop equal unitProcId usedFlag
		jump FlagLoop notEqual flag grabbedFlag

		ucontrol flag usedFlag
		op add flagged flagged 1
		jump FlagLoop always
	
DoneFlagging:
	set status "PROCESSING"

#################################################################
# Start Processing
#################################################################

Start:
CheckActive:
	sensor active switch @enabled
	jump StartOver notEqual lastActive active
	jump BindUnit equal active true

StartOver:
	set lastActive active
	jump FlagStart always
	
BindUnit:
	ubind unitType
	jump Start equal @unit null
	sensor isDead @unit @dead
	jump Start equal isDead true

	sensor flag @unit @flag
	op shr unitProcId flag extraBits

	jump FinishGroup equal firstUnit @unit
	jump Process notEqual firstUnit null

StartGroup:
	set i 0
	set flagged 0
	set free 0
	set firstUnit @unit

Process:
	jump NextFree equal flag 0
	jump Next notEqual unitProcId procId

DoStuff:
	ucontrol within @thisx @thisy 10 isNear
	jump Move equal isNear true
	ucontrol approach @thisx @thisy 5
	jump NextFlagged always

	Move:
		sensor x @unit @x
		sensor y @unit @y
		op add moveX x 12
		op add moveY y 12
		ucontrol move moveX moveY

NextFlagged:
	op add flagged flagged 1
	jump Next always

NextFree:
	op add free free 1

Next:
	op add i i 1
	jump Start always
	
FinishGroup:
	set totalUnits i
	set totalFlagged flagged
	set totalFree free
	set i 0
	set flagged 0
	set free 0
	set firstUnit null
	jump SelectFlagAction notEqual maxUnits totalFlagged
	jump Start always

# example error handler, for example if no ore is found
ErrorHandler:
	set error "your error message"
	jump Error always

Error:
	set status "ERROR"
	control enabled switch false
	jump FlagStart always
	
Reset:
	jump FlagStart equal status "NONE"
	set lastActive active
	jump ReleaseAll equal status "RELEASING"
	set startTick @tick

StopAll:
	set status "STOPPING"

	set firstUnit null
	StopLoop:
		ubind unitType
		jump AllStopped equal @unit firstUnit
		sensor flag @unit @flag
		op shr unitProcId flag extraBits
		jump StopLoop notEqual unitProcId procId

		jump StopUnit notEqual firstUnit null
		set firstUnit @unit
		
		StopUnit:
			ucontrol stop
			ucontrol unbind
		jump StopLoop always
		
	AllStopped:
		set status "RELEASING"
		jump FlagStart always
	
ReleaseAll:
	# loop until release wait 
	set status "RELEASING"
	op sub elapsed @tick startTick
	jump FlagStart lessThan elapsed waitTicks

	set firstUnit null

	ReleaseLoop:
		ubind unitType
		jump FinishRelease equal @unit null
		jump FinishRelease equal firstUnit @unit
		jump ReleaseUnit notEqual firstUnit null
		set firstUnit @unit
	
		ReleaseUnit:
			sensor flag @unit @flag
			op shr unitProcId flag extraBits
			jump ReleaseLoop notEqual unitProcId procId
			ucontrol flag 0
			jump ReleaseLoop always

	FinishRelease:
		set status "NONE"
		jump FlagStart always