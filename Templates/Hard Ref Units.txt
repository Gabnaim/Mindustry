Initialize:
	set status "INITIALIZE"
	set unitType @poly
	set maxUnits 4 # store upto 8

	GetSorter:
		set sorter sorter1
		jump GetSorter equal sorter null
	
	GetId:
		op shl procId @thisx 10
		op add procId procId @thisy

	GetStartUnit:
		ubind unitType
		jump GetStartUnit equal @unit null
		set firstUnit @unit

	PreFillSpots:
		set status "PREFILL"
		set prefilled 0
		PrefillLoop:
			op mul offset prefilled 2
			op add offset offset 1

			sensor flag @unit @flag
			jump Unflag greaterThanEq prefilled maxUnits
			jump Prefill equal flag procId
			jump PrefillBind notEqual flag 0
			ucontrol flag procId
			
			Prefill:
				set setUnit @unit
				op add setCurrentReturn @counter 1
				jump SetCurrent always
				ucontrol itemDrop @air 200
				op add prefilled prefilled 1
				jump PrefillBind always
			Unflag:
				jump PrefillBind notEqual flag procId
				ucontrol flag 0
				ucontrol itemDrop @air 200
			PrefillBind:
				ubind unitType
				jump PrefillLoop notEqual firstUnit @unit

		FinishPrefill:
			set firstUnit null

	set status "IDLE"

Start:
CheckActive:
	sensor oreChoice sorter @config
	jump ChangeOre notEqual oreChoice lastOre
	jump Start equal oreChoice null

	jump FinishGroup greaterThanEq used maxUnits

GetUnitOffset:
	op mul offset used 2
	op add offset offset 1

GetCurrentUnit:
	op add getCurrentReturn @counter 1
	jump GetCurrent always

BindUnit:
	ubind unitType
	jump Start equal @unit null
	jump FinishGroup equal firstUnit @unit
	jump ProcessUnit notEqual firstUnit null
	set firstUnit @unit
	
ProcessUnit:
	sensor isDead @unit @dead
	jump BindUnit equal isDead true

	sensor flag @unit flag
	jump UseCached strictEqual currentUnit @unit
	jump FillSpot equal currentUnit null
	jump Next always

UseCached:
	jump DoStuff equal flag procId 
	jump GrabUnit equal flag 0

	# release this unit
	set currentUnit null
	set setUnit null
	op add setCurrentReturn @counter 1
	jump SetCurrent always
	jump BindUnit always

FillSpot:
	jump SetCurrentUnit equal flag procId
	jump BindUnit notEqual flag 0

GrabUnit:
	ucontrol flag procId

SetCurrentUnit:
	set setUnit @unit
	op add setCurrentReturn @counter 1
	jump SetCurrent always
	set currentUnit @unit

DoStuff:
	set status "PROCESSING"
	op add used used 1
	ucontrol within @thisx @thisy 10 isNear
	jump Move equal isNear true
	ucontrol approach @thisx @thisy 5
	jump Next always

	Move:
		sensor x @unit @x
		sensor y @unit @y
		op add moveX x 12
		op add moveY y 12
		ucontrol move moveX moveY

Next:
	jump Start always

FinishGroup:
	set totalUsed used
	set used 0
	set firstUnit null
	jump Start always

GetCurrent:
	op add jumpGetCurrent @counter offset
	set @counter jumpGetCurrent
	
	set currentUnit minion1
	jump EndGetCurrent always
	set currentUnit minion2
	jump EndGetCurrent always
	set currentUnit minion3
	jump EndGetCurrent always
	set currentUnit minion4
	jump EndGetCurrent always
	set currentUnit minion5
	jump EndGetCurrent always
	set currentUnit minion6
	jump EndGetCurrent always
	set currentUnit minion7
	jump EndGetCurrent always
	set currentUnit minion8
	EndGetCurrent:
		set @counter getCurrentReturn

SetCurrent:
	op add jumpSetCurrent @counter offset
	set @counter jumpSetCurrent

	set minion1 setUnit
	jump EndSetCurrent always
	set minion2 setUnit
	jump EndSetCurrent always
	set minion3 setUnit
	jump EndSetCurrent always
	set minion4 setUnit
	jump EndSetCurrent always
	set minion5 setUnit
	jump EndSetCurrent always
	set minion6 setUnit
	jump EndSetCurrent always
	set minion7 setUnit
	jump EndSetCurrent always
	set minion8 setUnit
	EndSetCurrent:
		set @counter setCurrentReturn

ChangeOre:
	jump Reset equal oreChoice null
	set lastOre oreChoice
	jump Start always

Reset:
	jump Initialize equal status "IDLE"
	set status "STOPPING"

	set firstUnit null
	StopLoop:
		ubind unitType
		jump AllStopped equal @unit firstUnit
		sensor flag @unit @flag
		jump StopLoop notEqual flag usedFlag
		jump StopUnit notEqual firstUnit null
		set firstUnit @unit
		
		StopUnit:
			ucontrol stop
			ucontrol itemDrop @air cap
			ucontrol unbind
		jump StopLoop always
		
	AllStopped:
		set status "IDLE"
		jump Start always
	




	