Initialize:
	set unitType @poly
	set maxUnits 4 # store upto 8

	GetId:
		op shl procId @thisx 10
		op add procId procId @thisy

	GetStartUnit:
		ubind unitType
		jump GetStartUnit equal @unit null
		set firstUnit @unit

	UnflagAll:
		UnflagUnit:
			sensor flag @unit @flag
			jump UnflagBind notEqual flag procId
			ucontrol flag 0
			ucontrol itemDrop @air 200
		UnflagBind:
			ubind unitType
			jump UnflagAll notEqual firstUnit @unit

		FinishUnflag:
			set firstUnit null
			
Start:
GetUnitOffset:
	op mul offset used 2
	op add offset offset 1

GetCurrentUnit:
	op add getCurrentReturn @counter 1
	jump GetCurrent always

CheckUnit:
	sensor isDead currentUnit @dead
	jump BindUnit equal isDead false
	set currentUnit null

BindUnit:
	ubind unitType
	jump Start equal @unit null
	jump FinishGroup equal firstUnit @unit
	jump ProcessUnit notEqual firstUnit null
	set firstUnit @unit
	
ProcessUnit:
	sensor isDead @unit @dead
	jump BindUnit equal isDead true
	
	sensor flag @unit flag
	jump FillSpot equal currentUnit null
	jump DoStuff strictEqual currentUnit @unit
	jump Next always

FillSpot:
	jump SetCurrentUnit equal flag procId

GrabUnit:
	jump BindUnit notEqual flag 0
	ucontrol flag procId

SetCurrentUnit:
	op add setCurrentReturn @counter 1
	jump SetCurrent always

DoStuff:
	ucontrol within @thisx @thisy 10 isNear
	jump Move equal isNear true
	ucontrol approach @thisx @thisy 5
	jump NextUsed always

	Move:
		sensor x @unit @x
		sensor y @unit @y
		op add moveX x 12
		op add moveY y 12
		ucontrol move moveX moveY

NextUsed:
	op add used used 1
	jump FinishGroup greaterThanEq used maxUnits

Next:
	jump Start always

FinishGroup:
	set totalUsed used
	set used 0
	set firstUnit null
	jump Start always

GetCurrent:
	op add jumpGetCurrent @counter offset
	set @counter jumpGetCurrent
	
	set currentUnit minion1
	jump EndGetCurrent always
	set currentUnit minion2
	jump EndGetCurrent always
	set currentUnit minion3
	jump EndGetCurrent always
	set currentUnit minion4
	jump EndGetCurrent always
	set currentUnit minion5
	jump EndGetCurrent always
	set currentUnit minion6
	jump EndGetCurrent always
	set currentUnit minion7
	jump EndGetCurrent always
	set currentUnit minion8
	EndGetCurrent:
		set @counter getCurrentReturn

SetCurrent:
	op add jumpSetCurrent @counter offset
	set @counter jumpSetCurrent

	set minion1 @unit
	jump EndSetCurrent always
	set minion2 @unit
	jump EndSetCurrent always
	set minion3 @unit
	jump EndSetCurrent always
	set minion4 @unit
	jump EndSetCurrent always
	set minion5 @unit
	jump EndSetCurrent always
	set minion6 @unit
	jump EndSetCurrent always
	set minion7 @unit
	jump EndSetCurrent always
	set minion8 @unit
	EndSetCurrent:
		set @counter setCurrentReturn

ResetAll:
	set minion1 null
	set minion2 null
	set minion3 null
	set minion4 null
	set minion5 null
	set minion6 null
	set minion7 null
	set minion8 null

	set @counter resetAllReturn
		





	