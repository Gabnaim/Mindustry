Initialize:
	set status "INITIALIZE"
	set unitType @poly
	set maxUnits 4 # store upto 8

	GetSorter:
		set sorter sorter1
		jump GetSorter equal sorter null
	
	GetId:
		op shl procId @thisx 9
		op add procId procId @thisy

Preflag:
	set totalFlagged 0
	set totalFree 0
	set totalUnits 0
	set firstUnit null
	set flagged 0
	set free 0
	set i 0
	set neededFlags 0
	set status "COUNT"

	PreflagLoop:
		ubind unitType
		jump PreflagLoop equal @unit null
		sensor isDead @unit @dead
		jump PreflagLoop equal isDead true

		jump FinishCount equal firstUnit @unit
		jump FlagProcess notEqual firstUnit null
		set firstUnit @unit

	FlagProcess:
		sensor flag @unit @flag
		jump CountFlagged equal flag procId
		jump CountFree equal flag 0
		jump NextCount always
		
	CountFlagged:
		op add flagged flagged 1
		jump NextCount notEqual status "UNFLAG"
		ucontrol flag 0
		op sub neededFlags neededFlags 1
		jump FlagDone equal neededFlags 0
		jump NextCount always

	CountFree:
		op add free free 1
		jump NextCount notEqual status "FLAG"
		ucontrol flag procId
		op sub neededFlags neededFlags 1
		jump FlagDone equal neededFlags 0
	
	NextCount:
		op add i i 1
		jump PreflagLoop always

	FinishCount:
		jump GetNextAction greaterThan totalUnits 0
		set totalFlagged flagged
		set totalFree free
		set totalUnits i

		GetNextAction:
			jump FlagDone equal totalFlagged maxUnits
			jump FlagDone equal status "FLAG"
			jump FlagDone equal status "UNFLAG"

			set flagged 0
			set free 0
			set i 0
			set firstUnit null

			jump NeedFlags lessThan totalFlagged maxUnits
			op sub neededFlags totalFlagged maxUnits
			set status "UNFLAG"
			jump PreflagLoop always

			NeedFlags:
				op sub neededFlags maxUnits totalFlagged
				op min neededFlags neededFlags totalFree
				jump FlagDone lessThanEq neededFlags 0
				set status "FLAG"
				jump PreflagLoop always

	FlagDone:

	GetStartUnit:
		# get an already flagged unit
		ubind unitType
		jump GetStartUnit equal @unit null
		sensor isDead @unit @dead
		jump GetStartUnit equal isDead true
		sensor flag @unit @flag
		jump GetStartUnit notEqual flag procId

		ucontrol approach @thisx @thisy 5

	set status "IDLE"
	set used 0

Start:
CheckActive:
	sensor oreChoice sorter @config
	op notEqual active oreChoice null
	jump ActiveChanged notEqual active lastActive
	jump Reset equal active false

BindUnit:
	ubind unitType
	jump Start equal @unit null
	jump FinishGroup equal firstUnit @unit
	jump ProcessUnit notEqual firstUnit null
	set firstUnit @unit
	
ProcessUnit:
	sensor isDead @unit @dead
	jump BindUnit equal isDead true

	sensor flag @unit @flag
	jump BindUnit notEqual flag procId

DoStuff:
	set status "PROCESSING"
	op add used used 1
	ucontrol within @thisx @thisy 10 isNear
	jump Move equal isNear true
	ucontrol approach @thisx @thisy 5
	jump Next always

	Move:
		sensor x @unit @x
		sensor y @unit @y
		op add moveX x 12
		op add moveY y 12
		ucontrol move moveX moveY

Next:
	jump Start always

FinishGroup:
	set firstUnit null
	jump Start always

ActiveChanged:
	set lastActive active
	set releaseStart @tick
	jump Reset equal active false
	jump Initialize always

Reset:
	jump Start equal status "IDLE"
	jump Start equal status "ERROR"
	op sub releaseWait @tick releaseStart
	jump Start lessThan releaseWait releaseWaitTicks
	jump StopAll notEqual status "RELEASING"

ReleaseAll:
	op sub releaseWait @tick releaseStart
	jump Start lessThan releaseWait releaseWaitTicks
	jump Stopping always

StopAll:
	set status "STOPPING"

Stopping:
	set firstUnit null
	StopLoop:
		ubind unitType
		jump FinishStop equal @unit firstUnit
		jump StopUnit notEqual firstUnit null
		set firstUnit @unit
		
		StopUnit:
			sensor flag @unit @flag
			jump StopLoop notEqual flag procId
			ucontrol stop
			jump StopLoop equal status "STOPPING"
			ucontrol itemDrop @air 100
			ucontrol flag 0
			ucontrol boost true
			ucontrol move releaseX releaseY
			jump StopLoop always
		
	FinishStop:
		jump FinishRelease equal status "RELEASING"
		set status "RELEASING"
		jump Start always

	FinishRelease:
		set status "IDLE"
		jump Start always





	