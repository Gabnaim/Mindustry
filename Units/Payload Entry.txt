Initialize:
	set maxUnits 4
	set unitType @mega
	set maxDistance 30

	op shl procId @thisx 10 # first 10 bit for x
	op add procId procId @thisy # second 10 bit for y

	GetLinks:
		set requiredLinks 2
		jump GetLinks lessThan @links requiredLinks

		set i 0
		set found 0
		LinkLoop:
			getlink link i
			sensor type link @type

			#switch
			jump FoundSwitch equal type @switch

			#payload building
			jump FoundEntry equal type @additive-reconstructor
			jump FoundEntry equal type @multiplicative-reconstructor
			jump FoundEntry equal type @exponential-reconstructor
			jump FoundEntry equal type @tetrative-reconstructor
			jump FoundEntry equal type @payload-conveyor
			jump FoundEntry equal type @payload-router
			jump FoundEntry equal type @payload-void
			jump NextLink always

			FoundSwitch:
				set switch link
				op add found found 1
				jump NextLink always
	
			FoundEntry:
				op add found found 1
				set entry link

			NextLink:
				jump EndGetLinks equal found requiredLinks
				op add i i 1
				jump LinkLoop lessThan i @links
			
			jump GetLinks always

		EndGetLinks:

	sensor moveX entry @x
	sensor moveY entry @y
	sensor entrySize entry @size

	set targetX moveX
	set targetY moveY

	sensor id unitType @id
	jump Initialize greaterThan id 37

	FlyerCheck:
		jump Ground lessThanEq id 4
		jump Air lessThanEq id 9
		jump Ground lessThanEq id 14
		jump Air lessThanEq id 24
		Ground:
			set isGround true
			jump EndFlyerCheck always
		Air: 
			set isGround false
		EndFlyerCheck:
	
Preflag:
	set totalFlagged 0
	set totalFree 0
	set totalUnits 0
	set firstUnit null
	set flagged 0
	set free 0
	set i 0
	set neededFlags 0
	set status "COUNT"

	PreflagLoop:
		ubind unitType
		jump PreflagLoop equal @unit null
		sensor isDead @unit @dead
		jump PreflagLoop equal isDead true

		jump FinishCount equal firstUnit @unit
		jump FlagProcess notEqual firstUnit null
		set firstUnit @unit

	FlagProcess:
		sensor flag @unit @flag
		jump CountFlagged equal flag procId
		jump CountFree equal flag 0
		jump NextCount always
		
	CountFlagged:
		op add flagged flagged 1
		jump NextCount notEqual status "UNFLAG"
		ucontrol flag 0
		op sub neededFlags neededFlags 1
		jump FlagDone equal neededFlags 0
		jump NextCount always

	CountFree:
		op add free free 1
		jump NextCount notEqual status "FLAG"
		
		CheckDistance:
			sensor x @unit @x
			sensor y @unit @y
			op sub xDiff @thisx x
			op sub yDiff @thisy y
			op len distance xDiff yDiff
			jump NextCount greaterThan distance maxDistance

		Flag:
			ucontrol flag procId
			op sub neededFlags neededFlags 1
			jump FlagDone equal neededFlags 0
	
	NextCount:
		op add i i 1
		jump PreflagLoop always

	FinishCount:
		jump GetNextAction greaterThan totalUnits 0
		set totalFlagged flagged
		set totalFree free
		set totalUnits i

		GetNextAction:
			jump FlagDone equal totalFlagged maxUnits
			jump FlagDone equal status "FLAG"
			jump FlagDone equal status "UNFLAG"

			set flagged 0
			set free 0
			set i 0
			set firstUnit null

			jump NeedFlags lessThan totalFlagged maxUnits
			op sub neededFlags totalFlagged maxUnits
			set status "UNFLAG"
			jump PreflagLoop always

			NeedFlags:
				op sub neededFlags maxUnits totalFlagged
				op min neededFlags neededFlags totalFree
				jump FlagDone lessThanEq neededFlags 0
				set status "FLAG"
				jump PreflagLoop always

	FlagDone:

	GetStartUnit:
		set status "START"
		# get an already flagged unit
		ubind unitType
		jump GetStartUnit equal @unit null
		sensor flag @unit @flag
		jump GetStartUnit notEqual flag procId

		sensor size @unit @size
		sensor speed @unit @speed
		op mul radius size 2
		op add radius radius entrySize

		op div enterWait radius speed
		op add enterWait enterWait 1

		op sub checkSpeed speed 1
		op div stuckWait 1 checkSpeed

	set i 0

Start:
CheckActive:
	sensor active switch @enabled
	jump ActiveChanged notEqual active lastActive
	jump Reset equal active false
	jump FinishGroup greaterThan i totalUnits

BindUnit:
	ubind unitType
	jump Start equal @unit null
	jump FinishGroup equal firstUnit @unit
	jump ProcessUnit notEqual firstUnit null
	set firstUnit @unit
	
ProcessUnit:
	sensor isDead @unit @dead
	jump Start equal isDead true

	sensor flag @unit @flag
	jump Start notEqual flag procId

Approach:
	set status "APPROACH"
	op add i i 1
	ucontrol within targetX targetY radius isNear
	jump Enter equal isNear true
	ucontrol boost true

	jump GroundApproach equal isGround true

	AirApproach:
		ucontrol approach targetX targetY radius
		jump Start always
	
	GroundApproach:
		ucontrol pathfind targetX targetY 

		# We only calculate the target for the first unit. 
		# All others just do a pathfind using last target
		jump Start notEqual @unit firstUnit

		sensor startX @unit @x
		sensor startY @unit @y
		wait stuckWait

		CheckMoved:
			ucontrol within startX startY 1 notMoved
			jump Start equal notMoved false

		FindOpenSpot:
			sensor unitX @unit @x
			sensor unitY @unit @y
			set k 0
	
			jump AddX greaterThan unitX targetX
			set stepx -1
			AddX:
				set stepx 1
	
			jump AddY greaterThan unitY targetY
			set stepy -1
			AddY:
				set stepy 1
		
			FindOpenLoop:
				op mod xmove i 2
				jump XStep equal xmove 1
				YStep:
					op add targetY targetY stepy
				XStep:
					op add targetX targetX stepx

				ucontrol pathfind targetX targetY
				wait stuckWait
				
				ucontrol within startX startY 1 notMoved
				jump PathFinding equal notMoved false

				op add k k 1
				jump FindOpenLoop lessThan k 10

		PathFinding:
			jump Start always

Enter:
	set status "ENTER"
	ucontrol move moveX moveY
	wait enterWait
	ucontrol payEnter
	jump Start always

StopUnit:
	ucontrol stop
	ucontrol boost false
	jump Start always

FinishGroup:
	set firstUnit null
	set i 0
	jump Start always

ActiveChanged:
	set lastActive active
	jump Reset equal active false
	jump Initialize always

Reset:
	jump Start equal status "IDLE"
	set status "STOPPING"

	set firstUnit null
	StopLoop:
		ubind unitType
		jump AllStopped equal @unit null
		sensor dead @unit @dead
		jump StopLoop equal dead true

		jump AllStopped equal @unit firstUnit
		jump SetStopFirst equal firstUnit null
		sensor firstDead firstUnit @dead
		jump StopProcess equal firstDead false

		SetStopFirst:
			set firstUnit @unit

		StopProcess:
			sensor flag @unit @flag
			jump StopLoop notEqual flag procId
			ucontrol flag 0
			ucontrol unbind

		jump StopLoop always
		
	AllStopped:
		set status "IDLE"
		set firstUnit null
		jump Start always
	
	
