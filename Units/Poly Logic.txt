Initialize:
	set sourceFile "Poly Logic.txt"
	set unitType @poly
	set withdrawDistance 23
	set defendRadius 23
	set miningRange 8.5
	# mining coal can be turned off. Copper and lead can't
	set mineCoal true

	set maxTick 360 #break loop after 6 seconds idle
	
	GetStartInfo:
		ubind unitType
		jump GetStartInfo equal @unit null
		ulocate building core false 0 coreX coreY coreFound core
		sensor maxStock core @itemCapacity
		sensor cap @unit @itemCapacity
		sensor range @unit @range
		op sub range range 1
			
	# use a flip to alternate units between repair and rebuild
	set flip false
	
	GetLinks:
		set switch switch1
		jump GetLinks equal switch null
	
	set status "START"
	
Start:
CheckActive:
	sensor active switch @enabled
	jump Start equal active false

BindUnit:
	ubind unitType
	jump Start equal @unit null
	sensor isDead @unit @dead
	jump Start equal isDead true
	sensor flag @unit @flag
	jump Start notEqual flag 0

SelectAction:
	op add checkEnemyReturn @counter 1
	jump CheckEnemy always
	
	op add repairReturn @counter 1
	jump CheckRepair always

	# if the unit is still shooting but there is no
	# enemy or damage, it has finished attacking or
	# repairing. Withdraw to core and reset
	sensor isShooting @unit @shooting
	jump Withdraw equal isShooting true
	jump Mine always

CheckEnemy:
	uradar enemy any any distance 0 1 enemy
	jump CheckEnemyEnd equal enemy null

	sensor enemyDead enemy @dead
	jump StopShooting equal enemyDead true

	set status "CHECKENEMY"

	sensor enemyX enemy @x
	sensor enemyY enemy @y
	op sub enemyDistX coreX enemyX
	op sub enemyDistY coreY enemyY
	op len enemyDist enemyDistX enemyDistY

	jump AttackUnit lessThanEq enemyDist defendRadius
	jump Withdraw always

	AttackUnit:
		set status "DEFEND"
		ucontrol approach enemyX enemyY range
		ucontrol targetp enemy 1
		jump Start always
		
	StopShooting:
		ucontrol targetp null 0
		set enemy null

	CheckEnemyEnd:
		set @counter checkEnemyReturn

CheckRepair:
	ulocate damaged core true 0 dmgX dmgY dmgFound damaged
	jump CheckRepairEnd equal dmgFound false

	set status "REPAIR"
	ucontrol within dmgX dmgY range isNearDmg
	jump DoRepair equal isNearDmg true
	ucontrol approach dmgX dmgY range
	jump Start always
	
	DoRepair:
		# Use every second poly to rebuild
		op notEqual flip flip true
		jump RebuildGhost equal flip true
	
		ucontrol target dmgX dmgY dmgFound
		jump Start always
	
	RebuildGhost:
		# If we revert to standard AI (unbind), polies will rebuild
		ucontrol unbind
		jump Start always

	CheckRepairEnd:
		ucontrol target 0 0
		set @counter repairReturn
	
Withdraw:
	set status "WITHDRAW"
	ucontrol target 0 0 0
	ucontrol targetp null 0
	ucontrol within coreX coreY withdrawDistance isNearCore
	jump Start equal isNearCore true
	ucontrol approach coreX coreY withdrawDistance
	jump Start always

Mine:
	set status "MINE"
	sensor isMining @unit @mining
	sensor carried @unit @totalItems
	sensor carriedItem @unit @firstItem
	jump DropItems equal carried cap

	CheckStock:
		sensor copper core @copper
		sensor lead core @lead
		jump MineCoal equal mineCoal true
		set coal 999999
		jump SelectOre always
	MineCoal:
		sensor coal core @coal
	
		SelectOre:
			jump MinCopper lessThan copper lead
			jump MinLead lessThan lead coal
			jump MinCoal always
			
			MinCopper:
				jump MinCoal lessThan coal copper
				set minedOre @copper
				jump EndCheckStock always
			MinLead:
				set minedOre @lead
				jump EndCheckStock always
			MinCoal:
				set minedOre @coal
		EndCheckStock:
			ulocate ore core true minedOre oreX oreY oreFound oreMine
	
	FindOre:
		jump MoveToOre equal carried 0
		jump DropItems notEqual carriedItem minedOre
		jump Start equal isMining true
	
	MoveToOre:
		ucontrol within oreX oreY miningRange isNearMine
		jump MineOre equal isNearMine true
		ucontrol mine oreX oreY
		ucontrol approach oreX oreY miningRange
	
	MineOre:
		ucontrol mine oreX oreY
		jump Start always

	DropItems:
		ucontrol within coreX coreY miningRange isNearDrop
		jump DropLoop equal isNearDrop true
		ucontrol approach coreX coreY miningRange
		jump Start always
	
		DropLoop:
			sensor carried @unit @totalItems
			LoopUntilEmpty:
				ucontrol itemDrop core carried
				sensor carried @unit @totalItems
				jump LoopUntilEmpty greaterThan carried 0 
		jump Start always
	