Initialize:
	set unitType @poly
	set withdrawDistance 3
	set defendRadius 23
	set miningRange 8
	
	GetStartInfo:
		ubind unitType
		jump GetStartInfo equal @unit null
		ulocate building core false 0 coreX coreY coreFound core
		sensor maxStock core @itemCapacity
		sensor cap @unit @itemCapacity
		sensor range @unit @range
		op sub range range 1

		# Use this unit to find the nearest ore sources
		# this way they are always the same
		GoToCore:
			ucontrol within coreX coreY 1 isAtCore
			jump LocateMines equal isAtCore true
			ucontrol move coreX coreY
			jump GoToCore always

		# There are no maps that can use a processor
		# and have no copper, lead and coal
		LocateMines:
			ulocate ore core true @copper copperX copperY copperFound oreMine
			ulocate ore core true @lead leadX leadY leadFound oreMine
			ulocate ore core true @coal coalX coalY coalFound oreMine
			
	# use a flip to alternate units between repair and rebuild
	set flip false
	set firstUnit null
	
	GetLinks:
		set switch switch1
		jump GetLinks equal switch null
	
Start:
	printflush message1
CheckActive:
	sensor active switch @enabled
	jump Reset equal active false

BindUnit:
	ubind unitType
	jump Start equal @unit null
	sensor isDead @unit @dead
	jump Start equal isDead true
	sensor flag @unit @flag
	jump Start notEqual flag 0

	jump FinishGroup equal firstUnit @unit
	jump SelectAction notEqual firstUnit null

StartGroup:
	set firstUnit @unit
	set isFirst true

SelectAction:
	uradar enemy any any distance 0 1 enemy
	jump Defend notEqual enemy null
	
	FindDamage:
		ulocate damaged core true 0 dmgX dmgY dmgFound damaged
		jump Repair equal dmgFound true

	# if the unit is still shooting but there is no
	# enemy or damage, it has finished attacking or
	# repairing. Withdraw to core and reset
	sensor isShooting @unit @shooting
	jump Withdraw equal isShooting true

	sensor isMining @unit @mining
	sensor carried @unit @totalItems
	sensor carriedItem @unit firstItem
	jump DropItems equal carried cap
	jump Mine always

Defend:
	sensor enemyDead enemy @dead
	jump Withdraw equal enemyDead true
	sensor enemyX enemy @x
	sensor enemyY enemy @y
	op sub enemyDistX coreX enemyX
	op sub enemyDistY coreY enemyY
	op len enemyDist enemyDistX enemyDistY

	jump AttackUnit lessThanEq enemyDist defendRadius
	jump FindDamage always

Repair:
	ucontrol within dmgX dmgY range isNearDmg
	jump DoRepair equal isNearDmg true
	print "Approaching damage\n"
	ucontrol approach dmgX dmgY range
	jump Next always
	
	DoRepair:
		# Use every second poly to rebuild
		op notEqual flip flip true
		jump RebuildGhost equal flip true
	
		ucontrol target dmgX dmgY dmgFound
		jump Next always
	
	RebuildGhost:
		# There is no command to rebuild a ghost (dead building) nor to find one. 
		# However, if we revert to standard AI (unbind), polies will rebuild
		# destroyed buildings.
		# We don't know where they are, but near a damaged building is a good bet.
		ucontrol unbind
		jump Next always
	
Withdraw:
	ucontrol target 0 0 0
	ucontrol targetp null 0
	ucontrol within coreX coreY withdrawDistance isNearCore
	jump Mine equal isNearCore true
	print "Approaching core\n"
	ucontrol approach coreX coreY withdrawDistance
	jump Next always

DropItems:
	ucontrol within coreX coreY miningRange isNearDrop
	jump DropLoop equal isNearDrop true
	print "Approaching drop\n"
	ucontrol approach coreX coreY miningRange
	jump Next always

	DropLoop:
		sensor carried @unit @totalItems
		LoopUntilEmpty:
			ucontrol itemDrop core carried
			sensor carried @unit @totalItems
			jump LoopUntilEmpty greaterThan carried 0 

Mine:
	# jump CheckStock equal minedOre null
	# jump FindOre notEqual isFirst true
	
CheckStock:
	sensor copper core @copper
	sensor lead core @lead
	sensor coal core @coal

	SelectOre:
		jump MinCopper lessThan copper lead
		jump MinLead lessThan lead coal
		jump MinCoal always
		
		MinCopper:
			jump MinCoal lessThan coal copper
			set minedOre @copper
			set oreX copperX
			set oreY copperY
			jump EndCheckStock always
		MinLead:
			set minedOre @lead
			set oreX leadX
			set oreY leadY
			jump EndCheckStock always
		MinCoal:
			set minedOre @coal
			set oreX coalX
			set oreY coalY
	EndCheckStock:

FindOre:
	jump MoveToOre equal carried 0
	jump DropItems notEqual carriedItem minedOre
	jump MineOre equal isMining true

MoveToOre:
	ucontrol within oreX oreY miningRange isNearMine
	jump MineOre equal isNearMine true
	print "Approaching mine\n"
	ucontrol approach oreX oreY miningRange

MineOre:
	ucontrol mine oreX oreY
	jump Next always
	
AttackUnit:
	sensor enemyDead enemy @dead
	jump StopShooting equal enemyDead true

	ApproachEnemy:
		print "Approaching enemy\n"
		ucontrol approach enemyX enemyY range
		ucontrol targetp enemy 1
		jump Next always
	
StopShooting:
	ucontrol targetp null 0
	set enemy null
	jump Next always

Next:
	op add unitI unitI 1
	jump Start always

Reset:
FinishGroup:
	set totalCount unitI
	set unitI 0
	set firstUnit null
	jump Start always
	
