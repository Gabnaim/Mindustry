Initialize:
	set unitType @poly
	set withdrawDistance 3
	set defendRadius 23
	set miningRange 8

	# actions
	set IDLE 0
	set WITHDRAW 1
	set DEFEND 2
	set	REPAIR 3
	set MINE 4

	set action IDLE

	GetStartInfo:
		ubind unitType
		jump GetStartInfo equal @unit null
		ulocate building core false 0 coreX coreY coreFound core
		sensor maxStock core @itemCapacity
		sensor cap @unit @itemCapacity
		sensor range @unit @range
		op sub range range 1

	# use a flip to alternate units between repair and rebuild
	set flip false
	set firstUnit null
	
	GetLinks:
		set switch switch1
		jump GetLinks equal switch null
	
Start:
CheckActive:
	sensor active switch @enabled
	jump Reset equal active false

BindUnit:
	ubind unitType
	jump Start equal @unit null
	sensor isDead @unit @dead
	jump Start equal isDead true
	sensor flag @unit @flag
	jump Start notEqual flag 0

	op equal isFirst firstUnit @unit

	jump SelectAction notEqual firstUnit null
	set firstUnit @unit

SelectAction:
	uradar enemy any any distance 0 1 enemy
	jump Defend notEqual enemy null
	sensor enemyDead enemy @dead
	jump Withdraw equal enemyDead true

	FindDamage:
		ulocate damaged core true 0 dmgX dmgY dmgFound damaged
		jump Repair equal dmgFound true

	# if the unit is still shooting but there is no
	# enemy or damage, it has finished attacking or
	# repairing. Withdraw to core and reset
	sensor isShooting @unit @shooting
	jump Withdraw equal isShooting true
	jump Withdraw equal action IDLE

	sensor isMining @unit @mining
	jump Mine equal isMining true
	sensor carried @unit @totalItems
	jump DropItems equal carried cap

	jump Mine always

Defend:
	sensor enemyX enemy @x
	sensor enemyY enemy @y
	op sub enemyDistX coreX enemyX
	op sub enemyDistY coreY enemyY
	op len enemyDist enemyDistX enemyDistY

	jump AttackUnit lessThanEq enemyDist defendRadius
	jump FindDamage always

Repair:
	set action REPAIR
	ucontrol within dmgX dmgY range isNearDmg
	jump DoRepair equal isNearDmg true
	ucontrol approach dmgX dmgY range
	jump Start always
	
	DoRepair:
		# Use every second poly to rebuild
		op notEqual flip flip true
		jump RebuildGhost equal flip true
	
		ucontrol target dmgX dmgY dmgFound
		jump Start always
	
	RebuildGhost:
		# There is no command to rebuild a ghost (dead building) nor to find one. 
		# However, if we revert to standard AI (unbind), polies will rebuild
		# destroyed buildings.
		# We don't know where they are, but near a damaged building is a good bet.
		ucontrol unbind
		jump Start always
	
Withdraw:
	ucontrol target 0 0 0
	ucontrol targetp null 0
	ucontrol within coreX coreY withdrawDistance isNearCore
	jump Mine equal isNearCore true
	ucontrol approach coreX coreY withdrawDistance
	jump Start always

DropItems:
	ucontrol within coreX coreY range isNearDrop
	jump DropLoop equal isNearDrop true
	ucontrol approach coreX coreY range
	jump Start always

	DropLoop:
		set i 0
		sensor carried @unit @totalItems
		LoopUntilEmpty:
			ucontrol itemDrop core carried
			sensor carried @unit @totalItems
			jump FinishDrop equal carried 0
			# infinite loop detection
			op add i i 1
			jump LoopUntilEmpty lessThan i 100 
		FinishDrop:
			ucontrol approach oreX oreY miningRange
			jump Start always

Mine:
	# check stock only once per cycle (when we reach first unit)
	jump FindOre equal isFirst false

CheckStock:
	sensor copper core @copper
	sensor lead core @lead
	sensor coal core @coal

	jump SelectOre lessThan copper maxStock
	jump SelectOre lessThan lead maxStock
	jump Start equal coal maxStock

	SelectOre:
		jump LessCopper lessThan copper lead
		jump LessLead lessThan lead coal
		jump LessCoal always
		
		LessCopper:
			jump LessCoal lessThan coal copper
			set minedOre @copper
			jump EndCheckStock always
		LessLead:
			set minedOre @lead
			jump EndCheckStock always
		LessCoal:
			set minedOre @coal
	EndCheckStock:
	
FindOre:
	ulocate ore core true minedOre oreX oreY oreFound oreMine
	jump Start equal oreFound false
	ucontrol within oreX oreY miningRange isNear
	jump MineOre equal isNear true
	ucontrol approach oreX oreY miningRange
	jump Start always

MineOre:
	sensor carried @unit @totalItems
	sensor 
DoMine:
	set action MINE
	ucontrol mine oreX oreY
	jump Start always
	
AttackUnit:
	set action DEFEND
	sensor enemyDead enemy @dead
	jump StopShooting equal enemyDead true

	ApproachEnemy:
		ucontrol approach enemyX enemyY range
		ucontrol targetp enemy 1
		jump Start always
	
StopShooting:
	ucontrol targetp null 0
	set enemy null
	jump Start always

Reset:
	set action IDLE
	set firstUnit null
	jump Start always

	
