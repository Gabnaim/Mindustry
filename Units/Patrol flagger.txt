Initialize:
	set unitType @zenith
	set maxUnits 4
	set extraBits 1 #extra information stored in flag
	
	GetLinks:
		set switch switch1
		jump GetLinks equal switch null

		# if flagging without a proc, set it to @this
		set targetProc processor1
		jump GetLinks equal targetProc null

GetId:
	sensor procX targetProc @x
	sensor procY targetProc @y
	op shl procId procX 10 # first 10 bits for x
	op add procId procId procY # second 10 bits for y

	# statuses
	set NONE 0
	set COUNTING 1
	set FLAGGING 2
	set UNFLAGGING 3
	
Start:
CheckActive:
	sensor active switch @enabled
	jump Reset equal active false
	
SelectAction:
	jump Count equal countDone false
	jump Flag lessThan totalFlagged maxUnits
	jump Unflag greaterThan totalFlagged maxUnits
	jump FinishRun always
	
Count:
	set status COUNTING
	set i 0
	set flaggedCount 0
	set freeCount 0
	set firstUnit null
	CountLoop:
		ubind unitType
		jump Start equal @unit null
		sensor isDead @unit @dead
		jump Start equal isDead true
	
		jump FinishCount equal firstUnit @unit
		jump CountProcess notEqual firstUnit null
		set firstUnit @unit
	
	CountProcess:
		sensor flag @unit @flag
		op shr unitProcId flag extraBits
		jump CountFlagged equal unitProcId procId
		jump CountFree equal flag 0
		jump NextCount always
		
	CountFlagged:
		op add flaggedCount flaggedCount 1
		jump NextCount always

	CountFree:
		op add freeCount freeCount 1
	
	NextCount:
		op add i i 1
		jump CountLoop always

	FinishCount:
		set totalFlagged flaggedCount
		set totalFree freeCount
		set totalUnits i
		set countDone true
		jump Start always

Flag:
	set status FLAGGING
	op sub neededFlags maxUnits totalFlagged
	op min neededFlags neededFlags totalFree
	jump FinishRun lessThanEq neededFlags 0
	
	set flagged 0
	set firstUnit null
	FlagLoop:
		ubind unitType
		jump Start equal @unit null
		sensor isDead @unit @dead
		jump Start equal isDead true
	
		jump FinishRun equal firstUnit @unit
		jump FinishRun greaterThanEq flagged neededFlags
		jump FlagProcess notEqual firstUnit null
		set firstUnit @unit
	
	FlagProcess:
		sensor flag @unit @flag
		op shr unitProcId flag extraBits
		jump FlagLoop equal unitProcId procId
		jump FlagLoop notEqual flag 0

		ucontrol flag procId
		op add flagged flagged 1
		jump FlagLoop always

Unflag:
	set status UNFLAGGING
	op sub neededUnflags totalFlagged maxUnits
	jump FinishRun lessThanEq neededUnflags 0
	set unflagged 0
	set firstUnit null

	UnflagLoop:
		ubind unitType
		jump Start equal @unit null
		sensor isDead @unit @dead
		jump Start equal isDead true
	
		jump FinishRun equal firstUnit @unit
		jump FinishRun greaterThanEq unflagged neededUnflags
		jump UnflagProcess notEqual firstUnit null
		set firstUnit @unit
	
	UnflagProcess:
		sensor flag @unit @flag
		op shr unitProcId flag extraBits
		jump RemoveFlag equal unitProcId procId
		jump UnflagLoop always

		RemoveFlag:
			ucontrol flag 0
			op add unflagged unflagged 1
			jump UnflagLoop always

FinishRun:
	op add runCount runCount 1
	set countDone false
	jump Start always
	
Reset:
	jump Start equal runCount 0
	set totalFlagged 0
	set totalFree 0
	set totalUnits 0
	set countDone false
	set runCount 0
	jump Start always