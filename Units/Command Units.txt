Initialize:
	set unitType @dagger
	set isGround true
	set useScout false
	set useFlagger false

	GetLinks:
		set sorter sorter1
		jump GetLinks equal sorter null
		GetScout:
			set scout hail1
			jump Constants equal useScout false
			jump GetScout equal scout null
		GetFlagger:
			set procId 0
			set proc processor1
			jump Constants equal useFlagger false
			jump GetFlagger equal proc null

	Constants:
		set IDLE 0
		set APPROACHING 1
		set STOPPING 2
		set ARRIVED 3

	set status IDLE
	set spawnRange 40
	set rallyDistanceX 5
	set rallyDistanceY 5

	# Get the flag from the processor that is doing the flagging
	GetId:
		jump GetStartInfo equal useFlagger false
		sensor procX proc @x
		sensor procY proc @y
		op shl procId procX 10 # first 10 bit for x
		op add procId procId procY # second 10 bit for y

	GetStartInfo:
		ubind unitType
		jump GetStartInfo equal @unit null
		sensor maxHealth @unit @maxHealth
		sensor range @unit @range
		op sub range range 1
		op floor range range

		sensor speed @unit @speed
		op sub checkSpeed speed 1
		op div waitTime 1 checkSpeed

		GetEnemyCore:
			ulocate building core true 0 attackX attackY coreFound building
			jump GetSpawn equal coreFound false
			jump GetRallyPoint always
			
		GetSpawn:
			ulocate spawn core true 0 attackX attackY spawnFound building
			jump Start equal spawnFound false

	GetRallyPoint:
		SetX:
			jump AddX greaterThan attackX @thisx
			op sub rallyX @thisx rallyDistanceX
			jump SetY always
			AddX:
				op add rallyX @thisx rallyDistanceX

		SetY:
			jump AddY greaterThan attackY @thisx
			op sub rallyY @thisy rallyDistanceY
			jump Start always
			AddY:
				op add rallyY @thisy rallyDistanceY
Start:
	printflush message1

CheckActive:
	sensor choice sorter @config
	jump ChoiceChanged notEqual choice lastChoice
	jump BindUnit notEqual choice null
	jump Start always

ChoiceChanged:
	set lastChoice choice
	jump StopAll equal choice null
	set firstUnit null
	set status IDLE
	
BindUnit:
	ubind unitType
	jump Start equal @unit null
	sensor isDead @unit @dead
	jump Start equal isDead true
	sensor flag @unit @flag
	jump Start notEqual flag procId
		
GetUnit:
	set currentUnit @unit
	jump AttackUnit notEqual enemy null
	ucontrol targetp null 0

CheckHealth:
	sensor health currentUnit @health
	op div healthRatio health maxHealth
	jump SelectAction equal healthRatio 1

Repair:
	ulocate building repair false 0 repairX repairY repairFound repairPoint
	jump SelectAction equal repairFound false

	ucontrol within repairX repairY 5 isNearRepair
	jump Heal equal isNearRepair true
	
	set action REPAIR
	set targetX repairX 
	set targetY repairY
	set radius 5
	jump Approach always

Heal:
	ucontrol stop
	ucontrol boost false
	jump Start lessThan healthRatio 1
	
SelectAction:
	jump Rally equal choice @copper
	jump Attack equal choice @lead
	jump Defend equal choice @metaglass
	jump Start always

Rally:
	jump Approach equal status APPROACHING
	set defend true
	set action RALLY
	set targetX rallyX
	set targetY rallyY
	set radius 5
	jump Approach always

Defend:
	set defend true
	set action DEFEND
	jump FindTargetUnit always

Attack:
	set defend false

FindTargetUnit:
	radar enemy any any distance scout 1 enemy
	jump AttackUnit notEqual enemy null
	uradar enemy any any distance 0 1 enemy
	jump AttackUnit notEqual enemy null
	jump Start equal defend true
	jump FindTargetBuilding equal spawnFound false

AttackSpawn:
	jump Approach equal status APPROACHING
	set targetX attackX
	set targetY attackY
	set radius spawnRange
	set action ATTACK_SPAWN
	jump Approach always
	
FindTargetBuilding:
	jump Approach equal status APPROACHING
	FindTurret:
		ulocate building turret true 0 targetX targetY turretFound building
		jump FindPower equal turretFound false
		sensor targetDead building @dead
		jump SelectCloserBuilding equal targetDead false
	FindPower:
		ulocate building generator true 0 targetX targetY powerFound building
		jump AttackCore equal powerFound false
		sensor targetDead building @dead
		jump AttackCore equal targetDead true
		
	SelectCloserBuilding:
		sensor unitX @unit @x
		sensor unitY @unit @y

		op sub distanceX unitX targetX
		op sub distanceY unitY targetY 
		op len targetDist distanceX distanceY

		op sub coreDistX unitX attacX
		op sub coreDistY unitY attackY
		op len coreDist coreDistX coreDistY
		
		jump AttackBuilding greaterThan coreDist targetDist

AttackCore:
	jump Approach equal status APPROACHING
	set targetX attackX
	set targetY attackY
	set radius range

AttackBuilding:
	ucontrol target targetX targetY true
	jump Approach always
	
AttackUnit:
	ucontrol flag procId
	sensor enemyDead enemy @dead
	jump StopShooting equal enemyDead true

	ApproachEnemy:
		sensor enemyX enemy @x
		sensor enemyY enemy @y
		ucontrol within enemyX enemyY range isNear
		jump ShootEnemy equal isNear true
		jump GroundApproachEnemy equal isGround true
		ucontrol approach enemyX enemyY range
		ucontrol targetp enemy 1
		jump Start always
	
	GroundApproachEnemy:
		ucontrol pathFind enemyX enemyY
		jump Start always
	
	ShootEnemy:
		ucontrol approach enemyX enemyY range
		ucontrol targetp enemy 1
		jump Start always
	
	StopShooting:
		ucontrol targetp null 0
		set enemy null
		set action NONE
		jump Start always

Approach:
	ucontrol within targetX targetY radius isNear
	jump StopUnit equal isNear true
	ucontrol boost true
	jump GroundApproach equal isGround true

	AirApproach:
		ucontrol approach targetX targetY radius
		set status APPROACHING
		jump Start always
	
	GroundApproach:
		ucontrol pathfind targetX targetY 

		# We only calculate the target for the first unit. 
		# All others just do a pathfind using last target
		jump Start notEqual @unit firstUnit

		sensor startX @unit @x
		sensor startY @unit @y
		wait waitTime

		CheckMoved:
			ucontrol within startX startY 1 notMoved
			jump PathFinding equal notMoved false

		FindOpenSpot:
			sensor unitX @unit @x
			sensor unitY @unit @y
			set i 0
	
			jump AddX greaterThan unitX targetX
			set stepx -1
			AddX:
				set stepx 1
	
			jump AddY greaterThan unitY targetY
			set stepy -1
			AddY:
				set stepy 1
		
			FindOpenLoop:
				op mod xmove i 2
				jump XStep equal xmove 1
				YStep:
					op add targetY targetY stepy
				XStep:
					op add targetX targetX stepx

				ucontrol pathfind targetX targetY
				wait waitTime
				
				ucontrol within startX startY 1 notMoved
				jump PathFinding equal notMoved false

				op add i i 1
				jump FindOpenLoop lessThan i maxIndex
				
			set status IDLE
			jump Start always

		PathFinding:
			set status APPROACHING
			jump Start always

StopAll:
	set firstUnit @unit
	set status STOPPING
	StopLoop:
		ubind unitType
		jump StopFinish equal @unit null
		sensor isDead @unit @dead
		jump StopLoop equal isDead true
		sensor flag @unit @flag
		jump StopLoop notEqual flag procId
		
		ucontrol stop
		ucontrol boost false
		jump StopLoop notEqual @unit firstUnit

	StopFinish:
		set status IDLE
		jump Start always
			
StopUnit:
	ucontrol stop
	ucontrol boost false
	jump StopRest equal status STOPPING
	jump StopFirst equal @unit firstUnit
	jump Start always

StopFirst:
	set status STOPPING
	jump Start always

StopRest:
	jump Start notEqual @unit firstUnit
	set status ARRIVED 
	jump Start always
