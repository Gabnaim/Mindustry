Initialize:
	set unitType @zenith
	set rallyDistanceX 10 
	set rallyDistanceY 10 
	op add rallyX @thisx rallyDistanceX
	op add rallyY @thisy rallyDistanceY
	set defend true

	# set these to true if using scout or another processor to flag
	set useFlagger false
	set useScout true

	GetSorter:
		set sorter sorter1
		jump GetSorter equal sorter null

	# We can use a turret as a scout. It will be ignored if null
	GetScout:
		set scout hail1
		jump GetId equal useScout false
		jump GetScout equal scout null

	GetFlagger:
		set procId 0
		set proc processor1
		jump GetStartInfo equal useFlagger false
		jump GetFlagger equal proc null

	# Get the flag from the processor that is doing the flagging
	GetId:
		sensor procX proc @x
		sensor procY proc @y
		op shl procId procX 10 # first 10 bit for x
		op add procId procId procY # second 10 bit for y

	GetStartInfo:
		ubind unitType
		jump GetStartInfo equal @unit null
		sensor maxHealth @unit @maxHealth
		sensor range @unit @range
		op sub range range 1
		op floor range range
		ulocate building core true 0 enemyCoreX enemyCoreY coreFound enemyCore
		jump Start equal coreFound false

	GetRallyPoint:
		SetX:
			jump AddX greaterThan enemyCoreX @thisx
			op sub rallyX @thisx rallyDistanceX
			jump SetY always
			AddX:
				op add rallyX @thisx rallyDistanceX

		SetY:
			jump AddY greaterThan enemyCoreY @thisx
			op sub rallyY @thisy rallyDistanceY
			jump Start always
			op add rallyY @thisy rallyDistanceY
		

Start:
	printflush message1

CheckActive:
	sensor choice sorter @config
	jump Start equal choice null
	
BindUnit:
	ubind unitType
	jump Start equal @unit null
	sensor isDead @unit @dead
	jump Start equal isDead true
	sensor flag @unit @flag
	jump Start notEqual flag procId
		
GetUnit:
	set currentUnit @unit
	sensor unitX @unit @x
	sensor unitY @unit @y
	jump AttackUnit notEqual enemy null
	ucontrol targetp null 0

CheckHealth:
	sensor health currentUnit @health
	op div healthRatio health maxHealth
	jump SelectAction greaterThan healthRatio 0.5

Repair:
	print "Repairing\n"
	ulocate building repair false 0 repairX repairY repairFound repairPoint
	jump Rally equal repairFound false
	sensor powerIn repairPoint @powerNetIn
	jump Rally equal powerIn 0
	ucontrol within repairX repairY 5 isNearRepair
	jump Stop equal isNearRepair true

	ucontrol approach repairX repairY 5
	jump StopShooting always

SelectAction:
	jump Rally equal choice @copper
	jump Attack equal choice @lead
	jump Defend equal choice @metaglass
	jump Start always

Rally:
	set defend true
	print "Rallying\n"
	ucontrol within rallyX rallyY 5 isNearRally
	jump Stop equal isNearRally true
	ucontrol move rallyX rallyY
	jump Start always

Stop:
	print "Stopping\n"
	ucontrol stop
	jump FindTargetUnit always

Defend:
	set defend true
	jump FindTargetUnit always

Attack:
	set defend false
FindTargetUnit:
	radar enemy any any distance scout 1 enemy
	jump AttackUnit notEqual enemy null
	uradar enemy any any distance 0 1 enemy
	jump AttackUnit notEqual enemy null
	ucontrol targetp null 0
	jump Start equal defend true
		
FindTargetBuilding:
	print "Finding Target Building\n"
	FindTurret:
		ulocate building turret true 0 targetX targetY turretFound target
		jump FindPower equal turretFound false
		sensor targetDead target @dead
		jump SelectCloserBuilding equal targetDead false
	FindPower:
		ulocate building generator true 0 targetX targetY powerFound target
		jump AttackCore equal powerFound false
		sensor targetDead target @dead
		jump AttackCore equal targetDead true
		
SelectCloserBuilding:
	op sub distanceX unitX targetX
	op abs distanceX distanceX
	op sub coreDistX unitX enemyCoreX
	op abs coreDistX coreDistX
	
	op sub distanceY unitY targetY 
	op abs distanceY distanceY 
	op sub coreDistY unitY enemyCoreY
	op abs coreDistY coreDistY

	op add coreDist coreDistX coreDistY
	op add targetDist distanceX distanceY
	jump ApproachBuilding lessThan distanceY coreDistY

AttackCore:
	print "Locating core\n"
	ulocate building core true 0 enemyCoreX enemyCoreY coreFound enemyCore
	jump StopShooting equal coreFound false
	print "Attacking core\n"
	set targetX enemyCoreX
	set targetY enemyCoreY

ApproachBuilding:
	ucontrol approach targetX targetY range
	ucontrol target targetX targetY 1
	jump Start always
	
AttackUnit:
	sensor enemyDead enemy @dead
	jump StopShooting equal enemyDead true

ApproachEnemy:
	sensor enemyX enemy @x
	sensor enemyY enemy @y
	ucontrol approach enemyX enemyY range
	ucontrol targetp enemy 1
	jump Start always

StopShooting:
	print "Stop shooting\n"
	ucontrol targetp null 0
	ucontrol target 0 0 0
	jump Start always
