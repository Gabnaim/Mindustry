Initialize:
	set unitType @dagger
	set ground true
	set radius 5
	set maxPathfindOffset 10
	op mul maxIndex maxPathfindOffset 2

	op add rallyX @thisx 10
	op add rallyY @thisy 3

	set repairX 142
	set repairY 105
	
	GetSorter:
		set sorter sorter1
		jump GetSorter equal sorter null

	set lastChoice null

Start:
	printflush message1

CheckActive:
	sensor choice sorter @config
	jump ChoiceChanged notEqual choice lastChoice
	jump BindUnit notEqual choice null
	jump Start always

ChoiceChanged:
	jump Stop equal choice null
	set pathfinding false
	set firstUnit null
	set stopping false
	set lastChoice choice
	
BindUnit:
	ubind unitType
	jump Start equal @unit null
	sensor isDead @unit @dead
	jump Start equal isDead true
	sensor flag @unit @flag
	jump Start notEqual flag 0
	jump SelectAction notEqual firstUnit null
	set firstUnit @unit

SelectAction:
	jump Rally equal choice @copper
	jump Repair equal choice @lead
	jump Start always

Repair:
	jump Approach equal pathfinding true
	set targetX repairX
	set targetY repairY
	jump Approach always
	
Rally:
	jump Approach equal pathfinding true
	set targetX rallyX
	set targetY rallyY
	jump Approach always

Approach:
	ucontrol within targetX targetY radius isNear
	jump Stop equal isNear true
	ucontrol boost true
	jump GroundApproach equal ground true

	AirApproach:
		ucontrol approach targetX targetY radius
		jump Start always
	
	GroundApproach:
		
		ucontrol pathfind targetX targetY 

		# We only calculate the target for the first unit. All others just do a pathfind
		jump Start notEqual @unit firstUnit

		sensor startX @unit @x
		sensor startY @unit @y
		wait 0.2

		CheckMoved:
			ucontrol within startX startY 1 notMoved
			jump PathFinding equal notMoved false

		FindOpenSpot:
			sensor unitX @unit @x
			sensor unitY @unit @y
			set i 0
	
			jump AddX greaterThan unitX targetX
			set stepx -1
			AddX:
				set stepx 1
	
			jump AddY greaterThan unitY targetY
			set stepy -1
			AddY:
				set stepy 1
		
			FindOpenLoop:
				op mod xmove i 2
				jump XStep equal xmove 1
				YStep:
					op add targetY targetY stepy
				XStep:
					op add targetX targetX stepx

				ucontrol pathfind targetX targetY
				wait 0.2
				
				ucontrol within startX startY 1 notMoved
				jump PathFinding equal notMoved false

				op add i i 1
				jump FindOpenLoop lessThan i maxIndex
				
		jump Start always

		PathFinding:
			set pathfinding true
			jump Start always
			
Stop:
	print "Stop\n"
	ucontrol stop
	ucontrol boost false
	jump StopRest equal stopping true
	op equal stopping @unit firstUnit
	jump Start always

StopRest:
	jump Start notEqual @unit firstUnit
	set pathfinding false
	set stopping false
	jump Start always
	


