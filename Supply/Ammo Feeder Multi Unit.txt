set name "Ammo Feeder"

Initialize:
	UserConfig:
		set unitType @mega
		set supplyFromCore true
		set minSupply 500
		set material @thorium
		set maxUnits 4	
		set maxDistance 100 # do not bind if further away
							# set to 0 to skip

	set status "INITIALIZE"
	set error " "

	set dropRange 7

	op mul procId @thisx @maph
	op add procId procId @thisy
	op floor procId procId

	set arrayLength 12
	jump TooMany greaterThan maxUnits arrayLength

	set neededLinks 1
	jump GetLinks equal supplyFromCore true
	set neededLinks 2

	GetLinks:
		jump GetLinks lessThan @links neededLinks	
		set source null
		set l 0
		set targetCount 0
		LinkLoop:
			getlink link l
			sensor ammoCap link @ammoCapacity
			jump FoundTarget greaterThanEq ammoCap 10
			jump NextLink equal supplyFromCore true
			sensor cap link @itemCapacity
			jump FoundSource greaterThanEq cap 100
			jump NextLink always
		FoundTarget:
			op add targetCount targetCount 1
			sensor targetCap link @ammoCapacity
			jump NextLink always
		FoundSource:
			set source link
		NextLink:
			op add l l 1
			jump LinkLoop lessThan l @links
			jump GetLinks equal targetCount 0
			jump EndGetLinks equal supplyFromCore true
			jump GetLinks equal source null
		EndGetLinks:

	op mul stockLevel targetCap 0.9 
	op floor stockLevel stockLevel
	op add checkRange dropRange 1
	set lastLinks @links
		
	GetStartInfo:
		ubind unitType
		jump GetStartInfo equal @unit null
		sensor cap @unit @itemCapacity
		sensor speed @unit @speed
		ulocate building core false 0 coreX coreY coreFound core
		jump GetSourceCoords equal supplyFromCore false
		set source core

	GetSourceCoords:
		sensor sourceX source @x
		sensor sourceY source @y

#-------------------------------------------------
Preflag:
#-------------------------------------------------
	set flagStart @time
	Count:
		set status "COUNT"
		set flagged 0
		set free 0
		set units 0
		set tooFar 0
		
		ubind unitType
		jump NoUnits equal @unit null
		set firstUnit @unit
		jump CountProcess always
		
		CountLoop:
			ubind unitType
			jump FinishCount equal firstUnit @unit
	
		CountProcess:
			sensor isDead @unit @dead
			jump CountLoop equal isDead true
			sensor flag @unit @flag
			jump CountFree equal flag 0
			jump NextCount notEqual flag procId
			jump CountFlagged greaterThanEq flagged maxUnits

			SaveFlagged: 
				set unit @unit
				set arrayIndex flagged
				op add arrayReturn @counter 1
				jump ArraySet always
	
			CountFlagged:
				op add flagged flagged 1
				jump NextCount always
	
			CountFree:
				op add free free 1
		
		NextCount:
			op add units units 1
			jump CountLoop always
	
		FinishCount:
			jump FlagDone equal flagged maxUnits
			jump Unflag greaterThan flagged maxUnits
	
	Flag:
		jump FlagDone equal free 0

		set status "FLAG"
		ubind unitType
		set firstUnit @unit
		jump FlagProcess always
	
		FlagLoop:
			ubind unitType
			jump FinishFlag equal firstUnit @unit
	
		FlagProcess:
			sensor isDead @unit @dead
			jump FlagLoop equal isDead true
			sensor flag @unit @flag
			jump NextFlag notEqual flag 0
	
		ProcessFree: 
			sensor controlled @unit @controlled
			jump NextFlag greaterThanEq controlled 2
	
			CheckDistance:
				jump FlagUnit lessThanEq maxDistance 0
				sensor x @unit @x
				sensor y @unit @y
				op sub xDiff @thisx x
				op sub yDiff @thisy y
				op len distance xDiff yDiff
				jump UnitTooFar greaterThan distance maxDistance
	
			FlagUnit:
				ucontrol flag procId
				set arrayIndex flagged
				set unit @unit
				op add arrayReturn @counter 1
				jump ArraySet always
				op add flagged flagged 1

		UnitTooFar:
			op add tooFar tooFar 1
		
		NextFlag:
			jump FlagLoop lessThan flagged maxUnits
		
		FinishFlag:
			jump FlagDone equal flagged maxUnits
			jump NoUnits equal flagged 0
			jump FlagDone always
	
	Unflag:
		set status "UNFLAG"		

		ubind unitType
		set firstUnit @unit
		jump UnflagProcess always
	
		UnflagLoop:
			ubind unitType
			jump FlagDone equal firstUnit @unit
	
		UnflagProcess:
			sensor isDead @unit @dead
			jump UnflagLoop equal isDead true
			sensor flag @unit @flag
			jump NextUnflag notEqual flag procId
	
		UnflagUnit:
			ucontrol flag 0
			op sub flagged flagged 1
		
		NextUnflag:
			jump UnflagLoop greaterThan flagged maxUnits
		
		FlagDone:
			op sub flagTime @time flagStart

	ClearArray:
		jump ClearDone equal flagged maxUnits
		set arrayIndex flagged 
		set unit null
		ClearLoop:
			op add arrayReturn @counter 1
			jump ArraySet always
			op add arrayIndex arrayIndex 1
			jump ClearLoop lessThan arrayIndex maxUnits
		ClearDone:

	op div targetPerUnit targetCount flagged
	op ceil targetPerUnit targetPerUnit

	set status "RUNNING"
	set error " "
	set arrayIndex 0
	
#--------------------------------------------------
MainLoop:
#--------------------------------------------------

Start:
	jump GetLinks notEqual @links lastLinks

CheckUnit:
	op add arrayReturn @counter 1
	jump ArrayGet always

	jump Rebind equal unit null
	sensor isDead unit @dead
	jump Rebind equal isDead true
	sensor flag unit @flag
	jump Reflag equal flag 0
	jump Rebind notEqual flag procId
	jump Rebind lessThan flagged maxUnits
	jump DoStuff always

Rebind:
	jump Preflag always
	
Reflag:
	ubind unit
	ucontrol flag procId
	op add arrayReturn @counter 1
	jump ArraySet always

DoStuff:	
	ubind unit
	set mule unit

	sensor carriedMat mule @firstItem
	jump FeedTargets equal material carriedMat
	jump FeedTargets equal material null

DropToSource:
	ucontrol within sourceX sourceY dropRange isNear
	jump SourceDrop equal isNear true
	ucontrol approach sourceX sourceY dropRange
	jump DropToSource always

	SourceDrop:
		ucontrol itemDrop source cap
		sensor carried mule @totalItems
		jump EndSourceDrop equal carried 0
		ucontrol itemDrop @air cap
	EndSourceDrop:
		
FeedTargets:
	op mul minLink targetPerUnit arrayIndex
	op add maxLink minLink targetPerUnit
	set l minLink
	set minStock targetCap
	set target null
	BuildingLoop:
		getlink link l
		
		CheckTurret:
			sensor ammoCap link @ammoCapacity
			jump NextBuilding lessThan ammoCap 10

		CheckMin:
			sensor stock link @ammo
			jump NextBuilding greaterThanEq stock minStock	
			set target link
			set targetLink l
			set minStock stock
			
		NextBuilding:
			op add l l 1
			jump BuildingLoop lessThan l @links

	Fillup:
		sensor carried mule @totalItems
		jump GetPosition greaterThan carried stockLevel
	
		sensor sourceDead source @dead
		jump SourceDead equal sourceDead true
	
		sensor supply source material
		jump NotEnough lessThan supply minSupply
	
		ApproachSource:
			ucontrol approach sourceX sourceY dropRange
			ucontrol within sourceX sourceY checkRange isNear
			jump Next equal isNear false

		PickupLoop:
			ucontrol itemTake source material cap
			sensor carried mule @totalItems
			jump EndPickup greaterThanEq carried cap
	
			op add pickupI pickupI 1
			jump PickupLoop lessThan pickupI 10
		EndPickup:
	
	GetPosition:
		jump Finish equal target null
		sensor targetX target @x
		sensor targetY target @y
	
	Approach:
		ucontrol within targetX targetY checkRange isNear
		jump Drop equal isNear true
		ucontrol approach targetX targetY dropRange
		jump Next always
	Drop:
		ucontrol itemDrop target cap
		jump Next always
	
	Finish:
		printflush message1
	
	Next:
		op add arrayIndex arrayIndex 1
		jump Start lessThan arrayIndex flagged
	
FinishGroup:
	set arrayIndex 0
	jump Start always

#-------------------------------------------------
Errors:
#-------------------------------------------------
TooMany:
	set error "Max 12 units supported"
	jump GetLinks always

SourceDead:
	jump SetSourceDeadError equal supplyFromCore false
	ulocate building core false 0 sourceX sourceY coreFound source 
	jump Start equal coreFound true

	SetSourceDeadError:
		set error "Source not found"
		jump Start always

NotEnough:
	set error "Not enough stock"
	jump Start always
	
NoUnits:
	jump TooFar greaterThan tooFar 0
	set error "No free units"
	jump Preflag always

TooFar:
	set error "Some units are too far"
	jump Preflag always


#-------------------------------------------------
Array:
#-------------------------------------------------
ArraySet:
	op mul offset arrayIndex 2
	op add @counter @counter offset

	set unit0 unit
	set @counter arrayReturn
	set unit1 unit
	set @counter arrayReturn
	set unit2 unit
	set @counter arrayReturn
	set unit3 unit
	set @counter arrayReturn
	set unit4 unit
	set @counter arrayReturn
	set unit5 unit
	set @counter arrayReturn
	set unit6 unit
	set @counter arrayReturn
	set unit7 unit
	set @counter arrayReturn
	set unit8 unit
	set @counter arrayReturn
	set unit9 unit
	set @counter arrayReturn

	set unit10 unit
	set @counter arrayReturn
	set unit11 unit
	set @counter arrayReturn

ArrayGet:
	op mul offset arrayIndex 2
	op add @counter @counter offset

	set unit unit0
	set @counter arrayReturn
	set unit unit1
	set @counter arrayReturn
	set unit unit2
	set @counter arrayReturn
	set unit unit3
	set @counter arrayReturn
	set unit unit4
	set @counter arrayReturn
	set unit unit5
	set @counter arrayReturn
	set unit unit6
	set @counter arrayReturn
	set unit unit7
	set @counter arrayReturn
	set unit unit8
	set @counter arrayReturn
	set unit unit9
	set @counter arrayReturn

	set unit unit10
	set @counter arrayReturn
	set unit unit11
	set @counter arrayReturn