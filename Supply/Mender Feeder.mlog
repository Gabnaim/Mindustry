set name "Mender Feeder"

Initialize:
	set unitType @mega
	set supplyFromCore true
	set minSupply 500

	set material @phase-fabric
	set targetType @mend-projector
	
	set error " "
	set status "INITIALIZE"

	set dropRange 7

	op mul procId @thisx @maph
	op add procId procId @thisy
	op floor procId procId
	
	set neededLinks 1
	jump GetLinks equal supplyFromCore true
	set neededLinks 2

	GetLinks:
		jump GetLinks lessThan @links neededLinks	
		set source null
		set l 0
		set targetCount 0
		LinkLoop:
			getlink link l
			sensor type link @type
			jump FoundTarget equal type targetType
			jump NextLink equal supplyFromCore true
			sensor cap link @itemCapacity
			jump FoundSource greaterThanEq cap 100
		FoundTarget:
			op add targetCount targetCount 1
			sensor targetCap link @itemCapacity
			jump NextLink always
		FoundSource:
			set source link
		NextLink:
			op add l l 1
			jump LinkLoop lessThan l @links
			jump GetLinks equal targetCount 0
			jump EndGetLinks equal supplyFromCore true
			jump GetLinks equal source null
		EndGetLinks:

	op sub stockLevel targetCap 1
	op add checkRange dropRange 1
		
	GetStartInfo:
		ubind unitType
		jump GetStartInfo equal @unit null
		sensor cap @unit @itemCapacity
		sensor speed @unit @speed
		ulocate building core false 0 coreX coreY coreFound core
		jump GetSourceCoords equal supplyFromCore false
		set source core

	GetSourceCoords:
		sensor sourceX source @x
		sensor sourceY source @y

	set status "START"
	set error " "
	set mendEnabled true

#--------------------------------------------------
MainLoop:
#--------------------------------------------------
Start:

CheckMule:
	jump FindMule equal mule null
	sensor muleDead mule @dead
	jump FindMule equal muleDead true

	sensor muleFlag mule @flag
	jump StartRun equal muleFlag procId
	jump FindMule notEqual muleFlag 0
	RecycleMule:
		ubind mule
		ucontrol flag procId
		jump StartRun always

FindMule:
	set status "FINDMULE"
	set mule null
	set closest null
	set minDistance 1000
	
	ubind unitType
	jump NoUnits equal @unit null
	set firstUnit @unit
	jump FindProcess always

	FindLoop:
		ubind unitType
		jump FinishCount equal firstUnit @unit
		
	FindProcess:
		sensor isDead @unit @dead
		jump FindLoop equal isDead true
		sensor flag @unit @flag
		jump UseMule equal flag procId
		jump FindLoop notEqual flag 0
		sensor controlled @unit @controlled
		jump FindLoop greaterThanEq controlled 2

	CheckDistance:
		sensor x @unit @x
		sensor y @unit @y
		op sub xDiff @thisx x
		op sub yDiff @thisy y
		op len distance xDiff yDiff
			
		jump FindLoop greaterThan distance minDistance
		set minDistance distance
		set closest @unit
		jump FindLoop always
	
	FinishCount:
		jump NoUnits equal closest null
		set mule closest
		ubind mule
		ucontrol flag procId
		jump FindDone always
	
	FlagMule:
		ucontrol flag procId
	
	UseMule:
		set mule @unit
	
	FindDone:
		set error " "

StartRun:
	jump GetLinks lessThan @links neededLinks
	
	sensor carried mule @totalItems
	jump Fillup equal carried 0

	sensor carriedMat mule @firstItem
	jump Fillup equal material carriedMat

	op add callback @counter 1
	jump DropToSource always

Fillup:
	sensor carried mule @totalItems
	jump FeedTargets equal carried cap

	op add callback @counter 1
	jump PickupFromSource always

FeedTargets:
	set l 0
	set status "FEED"
	TargetLoop:
		getlink link l
			sensor type link @type
			jump NextTarget notEqual type targetType
			set target link
			sensor targetX target @x
			sensor targetY target @y
	
		Approach:
			ucontrol within targetX targetY dropRange isNear
			jump Drop equal isNear true
			ucontrol move targetX targetY	
			jump Approach always
	
		Drop:
			ucontrol itemDrop target 99
			sensor carried mule @totalItems
			jump CheckDrop greaterThanEq carried stockLevel

			op add callback @counter 1
			jump PickupFromSource always 
			jump Approach always
		
		CheckDrop:
			sensor stock target @totalItems
			jump Approach lessThan stock stockLevel
			
		NextTarget:
			op add l l 1
			jump TargetLoop lessThan l @links
	
	EndTargetLoop:

Finish:
	jump Start always
	
#-------------------------------------------------
SubRoutines:
#-------------------------------------------------
PickupFromSource:
	sensor sourceDead source @dead
	jump SourceDead equal sourceDead true

	sensor supply source material
	jump NotEnough lessThan supply minSupply

	ApproachSource:
		ucontrol boost true
		ucontrol approach sourceX sourceY dropRange
		ucontrol within sourceX sourceY checkRange isNearSource	
		jump ApproachSource equal isNearSource false

	SourcePickup:
		set pickupI 0
		SourcePickupLoop:
			ucontrol itemTake source material cap
			sensor carried mule @totalItems
			jump EndPickup greaterThanEq carried cap

			op add pickupI pickupI 1
			jump SourcePickupLoop lessThan pickupI 10

	EndPickup:
		set @counter callback

DropToSource:
	ucontrol within sourceX sourceY dropRange isNear
	jump SourceDrop equal isNear true
	ucontrol boost true
	ucontrol approach sourceX sourceY dropRange
	jump DropToSource always

	SourceDrop:
		ucontrol itemDrop source cap
		sensor carried mule @totalItems
		jump EndSourceDrop equal carried 0

		ucontrol itemDrop @air cap

	EndSourceDrop:
		set @counter callback

#-------------------------------------------------
Errors:
#-------------------------------------------------
SourceDead:
	set error "Source not found"
	jump Start always

NotEnough:
	set error "Not enough stock"
	jump Start always

NoUnits:
	set error "No free units"
	jump GetLinks always

