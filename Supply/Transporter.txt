Initialize:
	set unitType @poly

	GetMaterials:
		set takeAll true
		set material @titanium

	GetTargetParams:
		set dropToCore true
		set pickupFromCore false
		set targetX 0
		set targetY 0
		op equal areSame dropToCore pickupFromCore
		op and bothCore areSame dropToCore
		jump GetTargetParams equal bothCore true
		jump SetConstants notEqual areSame true

		NotCoreTransport:
			jump GetTargetParams equal targetX 0
			jump GetTargetParams equal targetY 0
		
	SetConstants:
		set dropRange 3
		set maxTick 360 #break loop after 6 seconds idle

	op shl procId @thisx 10
	op add procId procId @thisy

	GetStartInfo:
		ubind unitType
		jump GetStartInfo equal @unit null
		sensor isDead @unit @dead
		jump GetStartInfo equal isDead true
		sensor flag @unit @flag
		jump GetStartInfo notEqual flag procId

		sensor cap @unit @itemCapacity
		ulocate building core false 0 coreX coreY coreFound core
	
	GetLinks:
		set requiredLinks 2
		jump GetLinks lessThan @links requiredLinks

		set i 0
		set found 0
		LinkLoop:
			getlink link i
			sensor type link @type

			#switch
			jump FoundSwitch equal type @switch

			#container
			jump FoundContainer equal link core
			jump FoundContainer equal type @container
			jump FoundContainer equal type @vault
			jump NextLink always

			FoundSwitch:
				set switch link
				op add found found 1
				jump NextLink always
	
			FoundContainer:
				set container link
				op add found found 1
				jump NextLink always
	
			NextLink:
				jump EndGetLinks equal found requiredLinks
				op add i i 1
				jump LinkLoop lessThan i @links
	
		NotFound:
			jump GetLinks always

		EndGetLinks:

	SelectEndPoints:
		jump DropToCore equal dropToCore true
		jump PickupFromCore equal pickupFromCore true

		BetweenContainers:
			set source container
			FindTarget: 
				ucontrol within targetX targetY 6 isNear
				jump SetTarget equal isNear true
				ucontrol approach targetX targetY 6
				jump FindTarget always
			SetTarget:
				ulocate building storage false 0 dropX dropY dropFound dropTarget
				jump GetTargetParams equal dropFound false
				jump GetCoords always
		DropToCore:
			set source container
			set dropTarget core
			jump GetCoords always
		PickupFromCore:
			set source core
			set dropTarget container
			
	GetCoords:
		sensor sourceX source @x
		sensor sourceY source @y
		sensor dropX dropTarget @x
		sensor dropY dropTarget @y

Start:
CheckActive:
	sensor active switch @enabled
	jump Start equal active false

BindUnit:
	ubind unitType
	jump Start equal @unit null
	sensor isDead @unit @dead
	jump Start equal isDead true

	sensor flag @unit @flag
	jump Start notEqual flag procId

SelectAction:
	sensor carried @unit @totalItems
	sensor carriedItem @unit firstItem
	jump DropItems equal carried cap
	jump Pickup equal carried 0
	jump DropItems notEqual carriedItem material
	jump Pickup always 
	
DropItems:
	ucontrol within dropX dropY dropRange isNearDrop
	jump DropLoop equal isNearDrop true
	print "Approaching drop\n"
	ucontrol boost true
	ucontrol approach dropX dropY dropRange
	jump Start always

	DropLoop:
		set startTick @tick
		ucontrol boost false
		sensor carried @unit @totalItems
		LoopUntilEmpty:
			ucontrol itemDrop dropTarget carried
			sensor carried @unit @totalItems
			jump Pickup equal carried 0

			# break loop if idling too long
			op sub elapsed @tick startTick
			jump Start greaterThan elapsed maxTick
			jump LoopUntilEmpty greaterThan carried 0 

Pickup:
	ucontrol within sourceX sourceY dropRange isNearPickup
	jump SelectItem equal isNearPickup true
	print "Approaching pickup\n"
	ucontrol boost true
	ucontrol approach sourceX sourceY dropRange
	jump Start always

	SelectItem:
		jump PickupLoop equal takeAll false
		set maxStock 0
		set i 0
		set maxMaterial material
		SelectLoop:
			lookup item mat i
			sensor stock source mat 
			jump NextMat lessThanEq stock maxStock
			set maxStock stock
			set maxMaterial mat
		NextMat:
			op add i i 1
			jump SelectLoop lessThan i 16
	
		jump Start equal maxStock 0
		set material maxMaterial
	
	PickupLoop:
		set startTick @tick
		ucontrol boost false
		sensor carried @unit @totalItems
		LoopUntilFull:
			ucontrol itemTake source material cap
			sensor carried @unit @totalItems
			jump DropItems equal carried cap

			# break loop if idling too long
			op sub elapsed @tick startTick
			jump Start greaterThan elapsed maxTick
			jump LoopUntilFull lessThan carried cap

		jump Start always
