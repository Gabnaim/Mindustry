Initialize:
	set unitType @poly
	set maxUnits 3
	set material @silicon
	set takeAll false
	set pickupHere true # if false, drop here
	set coreTransport true # other side is core

	# if coreTransport is false, coordinates of other target
    # are required
	set otherEndX 0
	set otherEndY 0

	set waitTicks 1800 # wait 30 secs before releasing when idle
	set dropRange 7

	set status "INITIALIZE"
	set error " "
	
	op shl procId @thisx 10
	op add procId procId @thisy

	CheckConfig:
		jump Preflag equal coreTransport true
		op add otherEndCheck otherEndX otherEndY
		jump Preflag greaterThan otherEndCheck 0
		set error "need end coords"
		jump CheckConfig always

Preflag:
	set totalFlagged 0
	set totalFree 0
	set totalUnits 0
	set firstUnit null
	set flagged 0
	set free 0
	set i 0
	set status "COUNT"

	PreflagLoop:
		ubind unitType
		jump PreflagLoop equal @unit null
		sensor isDead @unit @dead
		jump PreflagLoop equal isDead true

		jump FinishCount equal firstUnit @unit
		jump FlagProcess notEqual firstUnit null
		set firstUnit @unit

	FlagProcess:
		sensor flag @unit @flag
		jump CountFlagged equal flag procId
		jump CountFree equal flag 0
		jump NextCount always
		
	CountFlagged:
		op add flagged flagged 1
		jump NextCount notEqual status "UNFLAG"
		ucontrol flag 0
		op sub neededFlags neededFlags 1
		jump FlagDone equal neededFlags 0
		jump NextCount always

	CountFree:
		op add free free 1
		jump NextCount notEqual status "FLAG"
		ucontrol flag procId
		op sub neededFlags neededFlags 1
		jump FlagDone equal neededFlags 0
	
	NextCount:
		op add i i 1
		jump PreflagLoop always

	FinishCount:
		jump GetNextAction greaterThan totalUnits 0
		set totalFlagged flagged
		set totalFree free
		set totalUnits i

		GetNextAction:
			jump FlagDone equal totalFlagged maxUnits
			jump FlagDone equal status "FLAG"
			jump FlagDone equal status "UNFLAG"

			set flagged 0
			set free 0
			set i 0

			jump NeedFlags lessThan totalFlagged maxUnits
			op sub neededFlags totalFlagged maxUnits
			set status "UNFLAG"
			jump PreflagLoop always

			NeedFlags:
				op sub neededFlags maxUnits totalFlagged
				op min neededFlags neededFlags totalFree
				jump FlagDone lessThanEq neededFlags 0
				set status "FLAG"
				jump PreflagLoop always

	FlagDone:

	GetStartUnit:
		set status "START"
		# get an already flagged unit
		ubind unitType
		jump GetStartUnit equal @unit null
		sensor flag @unit @flag
		jump GetStartUnit notEqual flag procId

		sensor cap @unit @itemCapacity
		sensor range @unit @range 
		op sub range range 1
		op min dropRange dropRange range

		ulocate building core false 0 coreX coreY coreFound core
	
	GetInput:
		set switch switch1
		jump GetInput equal switch null

	GetLinks:
		set i 0
		LinkLoop:
			getlink link i
			sensor type link @type
			jump FoundContainer equal link core
			jump FoundContainer equal type @container 
			jump FoundContainer equal type @vault
			jump FoundContainer equal type @mass-driver
			NextLink:
				op add i i 1
				jump LinkLoop lessThan i @links
				jump EndGetLinks notEqual linkedStorage null
			NoStorage:
				set error "No storage is linked"
				jump GetLinks always
			FoundContainer:
				set linkedStorage link

		EndGetLinks:

	FindOtherEndPoint:
		jump FindOtherEnd equal coreTransport false
		set otherEnd core
		jump SetEndPoints always

		FindOtherEnd:
			ucontrol within otherEndX otherEndY 1 isNear
			jump AtOtherEnd equal isNear true
			ucontrol move otherEndX otherEndY
			jump FindOtherEnd always
	
		AtOtherEnd:
			ulocate building storage false 0 endX endY endFound otherEnd
			jump SetEndPoints equal endFound true
			set error "Other end not found"
			jump AtOtherEnd always 0 0
		
	SetEndPoints:
		jump PickupHere equal pickupHere true
		DropHere:
			set source otherEnd
			set dropTarget linkedStorage
			jump GetCoords always

		PickupHere:
			set source linkedStorage
			set dropTarget otherEnd
		
	GetCoords:
		sensor sourceX source @x
		sensor sourceY source @y
		sensor dropX dropTarget @x
		sensor dropY dropTarget @y
	
	set firstUnit null
	set status "IDLE"
	set error " "

Start:
CheckActive:
	sensor active switch @enabled
	jump ActiveChanged notEqual active lastActive

BindUnit:
	ubind unitType
	jump Start equal @unit null
	jump FinishGroup equal firstUnit @unit
	jump ProcessUnit notEqual firstUnit null
	set firstUnit @unit
	
ProcessUnit:
	sensor isDead @unit @dead
	jump BindUnit equal isDead true

	sensor flag @unit @flag
	jump BindUnit notEqual flag procId

SelectAction:
	sensor carried @unit @totalItems
	sensor carriedItem @unit firstItem
	jump DropItems equal carried cap
	jump Pickup equal carried 0
	jump DumpItems notEqual carriedItem material
	jump Pickup always 

DumpItems:
	ucontrol itemDrop @air carried
	jump Pickup always
	
DropItems:
	ucontrol within dropX dropY dropRange isNearDrop
	jump DropLoop equal isNearDrop true
	ucontrol boost true
	ucontrol approach dropX dropY dropRange
	jump Start always

	DropLoop:
		set dropI 0
		ucontrol boost false
		sensor carried @unit @totalItems
		LoopUntilEmpty:
			ucontrol itemDrop dropTarget carried
			sensor carried @unit @totalItems
			jump Pickup equal carried 0
			op add dropI dropI 1
			jump LoopUntilEmpty lessThan dropI 100 

Pickup:
	ucontrol within sourceX sourceY dropRange isNearPickup
	jump SelectItem equal isNearPickup true
	ucontrol boost true
	ucontrol approach sourceX sourceY dropRange
	jump Start always

	SelectItem:
		jump PickupLoop equal takeAll false
		set maxStock 0
		set i 0
		set maxMaterial material
		SelectLoop:
			lookup item mat i
			sensor stock source mat 
			jump NextMat lessThanEq stock maxStock
			set maxStock stock
			set maxMaterial mat
		NextMat:
			op add i i 1
			jump SelectLoop lessThan i 16
	
		jump Start equal maxStock 0
		set material maxMaterial
	
	PickupLoop:
		set pickupI true
		ucontrol boost false
		sensor carried @unit @totalItems
		LoopUntilFull:
			ucontrol itemTake source material cap
			sensor carried @unit @totalItems
			jump DropItems equal carried cap

			op add pickupI pickupI 1
			jump LoopUntilFull lessThan pickupI 100 

		jump Start always

ActiveChanged:
	set lastActive active
	jump Reset equal active false
	jump Initialize always

FinishGroup:
	set totalUsed used
	set used 0
	set firstUnit null
	jump Start always

Reset:
	jump Start equal status "IDLE"
	jump Start equal status "ERROR"
	jump ReleaseAll equal status "RELEASING"
	set startTick @tick

ReleaseAll:
	set status "RELEASING"
	op sub elapsed @tick startTick
	jump Start lessThan elapsed waitTicks

	set firstUnit null
	ReleaseLoop:
		ubind unitType
		jump FinishRelease equal @unit firstUnit
		jump ReleaseUnit notEqual firstUnit null
		set firstUnit @unit
		
		ReleaseUnit:
			sensor flag @unit @flag
			jump ReleaseLoop notEqual flag procId
			ucontrol stop
			ucontrol itemDrop @air 100
			ucontrol flag 0
			jump ReleaseLoop always
		
	FinishRelease:
		set status "IDLE"
		jump Start always

