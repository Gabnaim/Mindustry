Initialize:
	set unitType @pulsar
	set material @silicon
	set dropRange 7
	set pickupHere true # pickup from the linkedStorage nearby
	
	op shl procId @thisx 10
	op add procId procId @thisy

	GetTargetParams:
		set coreTransport true # other side is core

		# if coreTransport is false, coordinates of other target
	    # are required
		set otherEndX 132
		set otherEndY 111

		jump GetStartInfo equal coreTransport true

		NotCoreTransport:
			jump GetTargetParams equal otherEndX 0
			jump GetTargetParams equal otherEndY 0

	GetStartInfo:
		ubind unitType
		jump GetStartInfo equal @unit null
		sensor isDead @unit @dead
		jump GetStartInfo equal isDead true

		sensor cap @unit @itemCapacity
		sensor range @unit @range 
		op sub range range 1
		op min dropRange dropRange range

		ulocate building core false 0 coreX coreY coreFound core
	
	GetInput:
		# if a sorter, we transport one item
		# if a switch, we take all
		set switch switch1
		set sorter sorter1
		jump GetInput equal switch sorter # one is required
		jump SetSwitch notEqual switch null

		SetSorter:
			set chooser sorter
			jump GetLinks always
	
		SetSwitch:
			set chooser switch
			set takeAll true

	GetLinks:
		jump GetLinks lessThan @links 2

		set i 0
		set found 0
		LinkLoop:
			getlink link i
			sensor type link @type
			jump FoundContainer equal link core
			jump FoundContainer equal type @linkedStorage 
			jump FoundContainer equal type @vault
			jump FoundContainer equal type @mass-driver
			NextLink:
				op add i i 1
				jump LinkLoop lessThan i @links
			NotFound:
				jump GetLinks equal linkedStorage null
			FoundContainer:
				set linkedStorage link

	FindOtherEndPoint:
		jump FindOtherEnd equal coreTransport false
		set otherEnd core
		jump SetEndPoints always

	FindOtherEnd:
		ucontrol within otherEndX otherEndY 1 isNear
		jump AtOtherEnd equal isNear true
		ucontrol move otherEndX otherEndY
		jump FindOtherEnd always

	AtOtherEnd:
		ulocate building storage false 0 endX endY endFound otherEnd
		jump GetTargetParams equal endFound false
		
	SetEndPoints:
		jump PickupHere equal pickupHere true
		DropHere:
			set source otherEnd
			set dropTarget linkedStorage
			jump GetCoords always

		PickupHere:
			set source linkedStorage
			set dropTarget otherEnd
		
	GetCoords:
		sensor sourceX source @x
		sensor sourceY source @y
		sensor dropX dropTarget @x
		sensor dropY dropTarget @y

Start:
CheckActive:
	jump CheckSorter notEqual sorter null

CheckSwitch:
	sensor active switch @enabled
	jump Start equal active false

CheckSorter:
	sensor oreChoice sorter @config
	jump Start equal oreChoice null

BindUnit:
	ubind unitType
	jump Start equal @unit null
	sensor isDead @unit @dead
	jump Start equal isDead true

	#sensor flag @unit @flag
	#jump Start notEqual flag procId

SelectAction:
	sensor carried @unit @totalItems
	sensor carriedItem @unit firstItem
	jump DropItems equal carried cap
	jump Pickup equal carried 0
	jump DumpItems notEqual carriedItem material
	jump Pickup always 

DumpItems:
	ucontrol itemDrop @air carried
	jump Pickup always
	
DropItems:
	ucontrol within dropX dropY dropRange isNearDrop
	jump DropLoop equal isNearDrop true
	ucontrol boost true
	ucontrol approach dropX dropY dropRange
	jump Start always

	DropLoop:
		set dropI 0
		ucontrol boost false
		sensor carried @unit @totalItems
		LoopUntilEmpty:
			ucontrol itemDrop dropTarget carried
			sensor carried @unit @totalItems
			jump Pickup equal carried 0
			op add dropI dropI 1
			jump LoopUntilEmpty lessThan dropI 100 

Pickup:
	ucontrol within sourceX sourceY dropRange isNearPickup
	jump SelectItem equal isNearPickup true
	ucontrol boost true
	ucontrol approach sourceX sourceY dropRange
	jump Start always

	SelectItem:
		jump PickupLoop equal takeAll false
		set maxStock 0
		set i 0
		set maxMaterial material
		SelectLoop:
			lookup item mat i
			sensor stock source mat 
			jump NextMat lessThanEq stock maxStock
			set maxStock stock
			set maxMaterial mat
		NextMat:
			op add i i 1
			jump SelectLoop lessThan i 16
	
		jump Start equal maxStock 0
		set material maxMaterial
	
	PickupLoop:
		set pickupI true
		ucontrol boost false
		sensor carried @unit @totalItems
		LoopUntilFull:
			ucontrol itemTake source material cap
			sensor carried @unit @totalItems
			jump DropItems equal carried cap

			op add pickupI pickupI 1
			jump LoopUntilFull lessThan pickupI 100 

		jump Start always
