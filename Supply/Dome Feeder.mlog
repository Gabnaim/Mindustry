set name "Dome Feeder"

Initialize:
	set unitType @flare
	set sourceMin 500
	set error " "
	set status "INITIALIZE"

	set dropRange 7
	set releaseWaitSecs 30

	set stockLevel 10
	set usagePerSec 0.2
	set transferTime 0.2

	op shl procId @thisx 9
	op add procId procId @thisy
	op mul releaseWaitMs releaseWaitSecs 1000

	GetDropTarget:
		set l 0
		LinkLoop:
			getlink link l
			sensor type link @type
			jump Found equal type @overdrive-dome
		NextLink:
			op add l l 1
			jump LinkLoop lessThan l @links
			jump GetDropTarget always
		Found:
			set dropTarget link
	
	GetDropCoords:
		sensor dropX dropTarget @x
		sensor dropY dropTarget @y 

	GetStartInfo:
		ubind unitType
		jump ReadInfo notEqual @unit null
		NoUnits:
			set error "No units"
			jump GetStartInfo always
	
		ReadInfo:
			sensor cap @unit @itemCapacity
			sensor speed @unit @speed
			ulocate building core false 0 sourceX sourceY sourceFound source
			jump GetStartInfo equal sourceFound false

	CalcDistanceParams:
		op div feedRate speed usagePerSec
		op sub dropDistX dropX sourceX
		op sub dropDistY dropY sourceY
		op len dropDist dropDistX dropDistY

		op sub travelDist dropDist dropRange
		op div travelTime travelDist speed
		op add travelTime travelTime transferTime
		op mul usageDuringTravel travelTime usagePerSec

		op ceil refillAmount usageDuringTravel
		op add checkRange dropRange 1

	set releaseStart @time
	set error " "
	set selectMaterial true

Start:
	op sub releaseWait @time releaseStart
	jump Release greaterThanEq releaseWait releaseWaitMs

CheckTarget:
	sensor targetDead dropTarget @dead
	jump TargetDead equal targetDead true

	jump Feed equal selectMaterial false

SelectMaterial:
	sensor silicon dropTarget @silicon
	sensor phase dropTarget @phase-fabric
	jump CheckPhase lessThan phase silicon
	
CheckSilicon:
	op sub needed stockLevel silicon
	set material @silicon
	jump CheckStock always
	
CheckPhase:
	op sub needed stockLevel phase
	set material @phase-fabric

CheckStock:
	op add needed needed refillAmount
	jump NothingToDo equal needed 0
	sensor sourceStock source material
	op sub available sourceStock sourceMin
	jump NotEnough lessThanEq available 0
	op min amount needed available
	op min amount amount cap
	set selectMaterial false
	set firstCycle false
	jump Feed always

NothingToDo:
	set material null
	jump Start always

TargetDead:
	set error "Target not found"
	jump Start always

NotEnough:
	set error "Not enough stock"
	jump Start always

Feed:
	set error " "
CheckMule:
	jump FindMule equal mule null
	sensor muleDead mule @dead
	jump FindMule equal muleDead true

	sensor muleFlag mule @flag
	jump StartRun equal muleFlag procId
	jump FindMule notEqual muleFlag 0
	RecycleMule:
		ubind mule
		ucontrol flag procId
		jump StartRun always

FindMule:
	set mule null
	set status "FIND"

	ubind unitType
	jump NoUnits equal @unit null
	set firstUnit @unit
	jump FlagProcess always

	FindLoop:
		ubind unitType
		jump NoUnits equal firstUnit @unit
	
	FlagProcess:
		sensor unitDead @unit @dead
		jump FindLoop equal unitDead true

		sensor flag @unit @flag
		jump UseMule equal flag procId
		jump FindLoop notEqual flag 0

		sensor controlled @unit @controlled
		jump FlagMule lessThan controlled 2
		jump FindLoop always
	
	NoUnits:
		set error "No free units"
		jump Start always
	
	FlagMule:
		ucontrol flag procId
	
	UseMule:
		set mule @unit
	
	FindDone:
		set error " "

StartRun:
	set status "FEED"
	sensor carried mule @totalItems
	sensor carriedMat mule @firstItem

	jump PickupFromSource equal carried 0
	jump DropToSource notEqual material carriedMat
	jump DropToTarget always

DropToSource:
	ucontrol approach sourceX sourceY dropRange
	ucontrol within sourceX sourceY checkRange isNear
	jump Start equal isNear false

	SourceDrop:
		ucontrol itemDrop source 99
		sensor carried @unit @totalItems
		jump Start equal carried 0

		# drop to air if source is full
		ucontrol itemDrop @air cap
		jump Start always

PickupFromSource:
	ucontrol approach sourceX sourceY dropRange
	ucontrol within sourceX sourceY checkRange isNear
	set releaseStart @time
	jump Start equal isNear false

	set pickupI 0
	SourcePickupLoop:
		ucontrol itemTake source material amount
		sensor carried mule @totalItems
		jump DropToTarget greaterThanEq carried amount

		op add pickupI pickupI 1
		jump SourcePickupLoop lessThan pickupI 10

	jump Start always

DropToTarget:
	ucontrol approach dropX dropY dropRange
	ucontrol within dropX dropY checkRange isNear
	set releaseStart @time
	ulocate building core false 0 sourceX sourceY sourceFound source
	jump Start equal isNear false

	set dropI 0
	TargetDropLoop:
		ucontrol itemDrop dropTarget 99
		set selectMaterial true
		sensor carried @unit @totalItems
		jump Start equal carried 0
		op add dropI dropI 1
		jump TargetDropLoop lessThan dropI 10

	jump Start always

Release:
	set releaseStart @time
	jump Start equal status "IDLE"
	set status "RELEASE"
	sensor carriedMat @unit @firstItem
	jump ReleaseUnit equal carriedMat null

	Dump:
		ucontrol approach sourceX sourceY dropRange
		ucontrol within sourceX sourceY dropRange isNear
		jump Dump equal isNear false
	
		SourceDump:
			ucontrol itemDrop source 99
			sensor carried @unit @totalItems
			jump ReleaseUnit equal carried 0
			# drop to air if source is full
			ucontrol itemDrop @air cap
	
	ReleaseUnit:
		ucontrol stop
		ucontrol flag 0
		ucontrol boost false
		ucontrol unbind
		set status "IDLE"
		set releaseStart @time
		jump Start always

