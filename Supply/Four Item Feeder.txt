set name "Four Item Feeder"

Initialize:
	set unitType @mega
	set sourceMin 500

	set items 4
	set stockAtCap true
	set material1 @copper
	set stockLevel1 900
	set material2 @lead
	set stockLevel2 1000
	set material3 @titanium
	set stockLevel3 700
	set material4 @silicon
	set stockLevel4 900

	set returnMaterial @surge-alloy

	set dropRange 7
	op shl procId @thisx 9
	op add procId procId @thisy

	GetDropTarget:
		set l 0
		LinkLoop:
			getlink link l
			sensor type link @type
			sensor buildingCap link @itemCapacity
			jump Found greaterThanEq buildingCap 10
		NextLink:
			op add l l 1
			jump LinkLoop lessThan l @links
			jump GetDropTarget always
		Found:
			set dropTarget link
	
	GetDropCoords:
		sensor dropX dropTarget @x
		sensor dropY dropTarget @y 
		sensor dropCap dropTarget @itemCapacity

FindMule:
	set firstUnit null
	set free 0
	set minDistance 1000
	set status "FIND"

	FindLoop:
		ubind unitType
		jump NotFound equal @unit null
		sensor unitDead @unit @dead
		jump FindLoop equal unitDead true
	
		jump FinishCount equal firstUnit @unit
		jump FlagProcess notEqual firstUnit null
		set firstUnit @unit
	
	FlagProcess:
		sensor flag @unit @flag
		jump UseMule equal flag procId
		jump FindLoop notEqual flag 0
	
	CheckDistance:
		ucontrol stop
		sensor x @unit @x
		sensor y @unit @y
		op sub xDiff @thisx x
		op sub yDiff @thisy y
		op len distance xDiff yDiff
		jump CountFree equal status "FIND"
		GetClosest:
			op sub diff distance minDistance
			op abs diff diff
			jump FlagMule lessThan diff 3
			jump FindLoop always
		
		CountFree:
			op add free free 1
			jump FindLoop greaterThan distance minDistance
			set minDistance distance
			jump FindLoop always
	
	FinishCount:
		jump NotFound equal free 0
		set error " "
		set firstUnit null
		jump FindMule equal status "FLAG"
		set status "FLAG"
		jump FindLoop always
	
	NotFound:
		set error "No free units"
		jump FindMule always
	
	FlagMule:
		ucontrol flag procId
	
	UseMule:
		set mule @unit
	
	FindDone:
		set error " "

	GetStartInfo:
		sensor cap @unit @itemCapacity
		sensor range @unit @range
		ulocate building core false 0 sourceX sourceY sourceFound source
		jump GetStartInfo equal sourceFound false

	set releaseStart @time

Start:
	op sub releaseWait @time releaseStart
	jump Release greaterThanEq releaseWait releaseWaitMs

CheckMule:
	jump FindMule equal mule null
	sensor muleDead mule @dead
	jump FindMule equal muleDead true

	sensor muleFlag mule @flag
	jump SelectMaterial equal muleFlag procId
	jump FindMule notEqual muleFlag 0
	set @unit mule

SelectMaterial:
	sensor carried mule @totalItems
	sensor carriedMat mule @firstItem

	set i 0
	set minIndex -1
	set minRate 1
	SelectLoop:
		op add arrayReturn @counter 1
		jump ArrayGet always 

	CheckMaterial:
		sensor dropLevel dropTarget material
		op sub needed stockLevel dropLevel
		jump NextMaterial lessThanEq needed 0

		# if we are carrying material that is still needed,
		# deliver it even if another stock is lower
		jump Feed equal material carriedMat
	
		sensor sourceLevel source material
		jump NextMaterial lessThanEq sourceLevel sourceMin

		op div stockRate dropLevel stockLevel
		jump NextMaterial greaterThanEq stockRate minRate
	
		set minIndex i
		set minRate stockRate

	NextMaterial:
		op add i i 1
		jump SelectLoop lessThan i items

	jump NothingToDo equal minIndex -1

	set i minIndex
	op add arrayReturn @counter 1
	jump ArrayGet always 	
	jump Feed always

NothingToDo:
	jump Start always

Feed:
StartRun:
	sensor carried mule @totalItems
	sensor carriedMat mule @firstItem

	jump DropToSource notEqual material carriedMat
	jump PickupFromSource equal carried 0
	jump DropToTarget always

DropToSource:
	ucontrol within sourceX sourceY dropRange isNearSource
	jump SourceDrop equal isNearSource true
	ucontrol approach sourceX sourceY dropRange
	ucontrol boost true
	jump Start always

	SourceDrop:
		set releaseStart @time
		set dropI 0
		ucontrol boost false
		sensor carried mule @totalItems
		SourceDropLoop:
			ucontrol itemDrop source carried
			sensor carried @unit @totalItems
			jump PickupFromSource equal carried 0
			op add dropI dropI 1
			jump SourceDropLoop lessThan dropI 100
		jump Start always

PickupFromSource:
	ucontrol within sourceX sourceY dropRange isNearSource
	jump SourcePickup equal isNearSource true
	ucontrol approach sourceX sourceY dropRange
	ucontrol boost true
	jump Start always

	SourcePickup:
		set releaseStart @time
		set pickupI 0
		ucontrol boost false
		SourcePickupLoop:
			ucontrol itemTake source material cap
			sensor carried mule @totalItems
			jump DropToTarget equal carried cap

			op add pickupI pickupI 1
			jump SourcePickupLoop lessThan pickupI 100 
			# make it work when the core was upgraded
			ulocate building core false 0 sourceX sourceY sourceFound source

DropToTarget:
	ucontrol within dropX dropY dropRange isNearDrop
	jump TargetDrop equal isNearDrop true
	ucontrol boost true
	ucontrol approach dropX dropY dropRange
	jump Start always

	TargetDrop:
		set releaseStart @time
		set dropI 0
		ucontrol boost false
		sensor carried mule @totalItems
		TargetDropLoop:
			ucontrol itemDrop dropTarget carried
			sensor carried @unit @totalItems
			jump Return equal carried 0
			op add dropI dropI 1
			jump TargetDropLoop lessThan dropI 100 

Return:
	jump PickupFromSource equal returnMaterial null
	sensor returnStock dropTarget returnMaterial
	jump PickupFromSource equal returnStock null
	op min returnAmount returnStock cap

PickupFromTarget:
	TargetPickup:
		set releaseStart @time
		set pickupI 0
		ucontrol boost false
		TargetPickupLoop:
			ucontrol itemTake dropTarget returnMaterial returnAmount
			sensor carried mule @totalItems
			jump Start equal carried returnAmount

			op add pickupI pickupI 1
			jump TargetPickupLoop lessThan pickupI 100 

FinishRun:
	jump Start always

Release:
	set status "RELEASE"
	ucontrol stop
	ucontrol flag 0
	ucontrol boost false
	ucontrol unbind
	set mule null
	set status "IDLE"
	jump Start always

ArrayGet:
	op mul offset i 3
	op add offset offset 1
	op add arrayLoc @counter offset
	set @counter arrayLoc

	set material material1
	set stockLevel stockLevel1
	set @counter arrayReturn

	set material material2
	set stockLevel stockLevel2
	set @counter arrayReturn

	set material material3
	set stockLevel stockLevel3
	set @counter arrayReturn

	set material material4
	set stockLevel stockLevel4
	set @counter arrayReturn




	