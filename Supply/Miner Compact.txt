Initialize:
	set status "INITIALIZE"
	set enabled false
	set unitType @pulsar
	set maxUnits 3
	set minedOre @coal
	set waitTicks 1800 # wait 30 secs before releasing when idle
	set miningRange 8.75
	set dropRange 7
	set useCoords false
	set oreX 58
	set oreY 138

	set error " "
	
	op shl procId @thisx 10
	op add procId procId @thisy

	CheckConfig:
		jump Preflag equal useCoords false
		op add oreCheck oreX oreY
		jump Preflag greaterThan oreCheck 0
		set error "need coords if using"
		jump CheckConfig always

Preflag:
	set totalFlagged 0
	set totalFree 0
	set totalUnits 0
	set firstUnit null
	set flagged 0
	set free 0
	set i 0
	set status "COUNT"

	PreflagLoop:
		ubind unitType
		jump PreflagLoop equal @unit null
		sensor isDead @unit @dead
		jump PreflagLoop equal isDead true

		jump FinishCount equal firstUnit @unit
		jump FlagProcess notEqual firstUnit null
		set firstUnit @unit

	FlagProcess:
		sensor flag @unit @flag
		jump CountFlagged equal flag procId
		jump CountFree equal flag 0
		jump NextCount always
		
	CountFlagged:
		op add flagged flagged 1
		jump NextCount notEqual status "UNFLAG"
		ucontrol flag 0
		op sub neededFlags neededFlags 1
		jump FlagDone equal neededFlags 0
		jump NextCount always

	CountFree:
		op add free free 1
		jump NextCount notEqual status "FLAG"
		ucontrol flag procId
		op sub neededFlags neededFlags 1
		jump FlagDone equal neededFlags 0
	
	NextCount:
		op add i i 1
		jump PreflagLoop always

	FinishCount:
		jump GetNextAction greaterThan totalUnits 0
		set totalFlagged flagged
		set totalFree free
		set totalUnits i

		GetNextAction:
			jump FlagDone equal totalFlagged maxUnits
			jump FlagDone equal status "FLAG"
			jump FlagDone equal status "UNFLAG"

			set flagged 0
			set free 0
			set i 0

			jump NeedFlags lessThan totalFlagged maxUnits
			op sub neededFlags totalFlagged maxUnits
			set status "UNFLAG"
			jump PreflagLoop always

			NeedFlags:
				op sub neededFlags maxUnits totalFlagged
				op min neededFlags neededFlags totalFree
				jump FlagDone lessThanEq neededFlags 0
				set status "FLAG"
				jump PreflagLoop always

	FlagDone:

	GetStartUnit:
		set status "START"
		# get an already flagged unit
		ubind unitType
		jump GetStartUnit equal @unit null
		sensor flag @unit @flag
		jump GetStartUnit notEqual flag procId

		sensor cap @unit @itemCapacity
		sensor range @unit @range
		op sub range range 1
		op min dropRange dropRange range
	
		ulocate building core false 0 coreX coreY coreFound core

	GetDropTarget:
		set l 0
		LinkLoop:
			getlink link l
			sensor type link @type
			jump Found equal link core
			jump Found equal type @container
			jump Found equal type @vault
			jump Found equal type @mass-driver
		NextLink:
			op add l l 1
			jump LinkLoop lessThan l @links
			set dropTarget core
			jump GetDropCoords always
		Found:
			set dropTarget link
	
	GetDropCoords:
		sensor dropX dropTarget @x
		sensor dropY dropTarget @y
		
	set status "IDLE"
	set oreFound false

Start:
	jump Start equal status "ERROR"

BindUnit:
	ubind unitType
	jump Start equal @unit null
	
ProcessUnit:
	sensor isDead @unit @dead
	jump BindUnit equal isDead true

	sensor flag @unit @flag
	jump BindUnit notEqual flag procId

SelectAction:
	jump FindOre equal oreFound false
	set status "MINING"
	sensor isMining @unit @mining
	sensor carried @unit @totalItems
	sensor carriedItem @unit @firstItem

	jump Mine equal carried 0
	jump DumpUnneeded notEqual carriedItem minedOre
	jump DropItems greaterThanEq carried cap
	jump Mine always

DumpUnneeded:
	ucontrol itemDrop @air carried
	jump Mine always

DropItems:
	ucontrol within dropX dropY dropRange isNearDrop
	jump DropLoop equal isNearDrop true
	ucontrol boost true
	ucontrol approach dropX dropY dropRange
	jump Next always

	DropLoop:
		set dropI 0
		ucontrol boost false
		sensor carried @unit @totalItems
		LoopUntilEmpty:
			ucontrol itemDrop dropTarget carried
			sensor carried @unit @totalItems
			jump Mine equal carried 0
			op add dropI dropI 1
			jump LoopUntilEmpty lessThan dropI 100
		jump Next always

Mine:
	MoveToOre:
		ucontrol within oreX oreY miningRange isNearMine
		jump MineOre equal isNearMine true
		ucontrol boost true
		ucontrol approach oreX oreY miningRange
	
	MineOre:
		ucontrol mine oreX oreY
		jump Next always

FindOre:
	# Use this unit to find the nearest ore source
	set status "LOCATEORE"

	jump SearchNearDrop equal useCoords false
	SearchAtCoords:
		ucontrol within oreX oreY 1 isNear
		jump CheckBlock equal isNear true
		ucontrol boost true
		ucontrol move oreX oreY 
		jump SearchAtCoords always

		CheckBlock:
			ucontrol getBlock oreX oreY type building floor
			jump NoOre notEqual type @air
		
			op add floorReturn @counter 1
			jump GetMinedFloor always

			jump FoundOre equal minedFloor floor
			jump NoOre notEqual minedOre @sand
		CheckSand:
			jump NoOre notEqual floor @darksand

		FoundOre:
			set oreFound true
			jump Next always
		
	SearchNearDrop:
		GoToDrop:
			ucontrol within dropX dropY 1 isNearDrop
			jump LocateOre equal isNearDrop true
			ucontrol boost true
			ucontrol approach dropX dropY 1
			jump GoToDrop always
		
		LocateOre:
			ulocate ore core true minedOre oreX oreY oreFound oreMine
			jump Next equal oreFound true

	NoOre:
		set error "No ore found"
		jump Error always

	OreFound:
		op sub oreCoreDistX coreX oreX
		op sub oreCoreDistY coreY oreY
		op len oreCoreDist oreCoreDistX oreCoreDistY
		jump Next greaterThan oreCoreDist 24

		# if the mine is near the core, we need to drop
		# before full to prevent auto drop to core
		op mul cap cap 0.6
		op floor cap cap

Next:
	jump Start always
		
Error:
	set status "ERROR"
	jump Start always

GetMinedFloor:
	sensor id minedOre @id
	op mul offset id 2
	op add offset offset 1
	op add floorJump @counter offset
	set @counter floorJump
	
	set minedFloor @ore-copper
	set @counter floorReturn
	set minedFloor @ore-lead
	set @counter floorReturn
	set minedFloor null
	set @counter floorReturn
	set minedFloor null
	set @counter floorReturn
	set minedFloor @sand-floor
	set @counter floorReturn
	set minedFloor @ore-coal
	set @counter floorReturn
	set minedFloor @ore-titanium
	set @counter floorReturn
	set minedFloor null
	set @counter floorReturn
	set minedFloor @ore-scrap
	set @counter floorReturn
