Initialize:
Configuration:
	set unitType @poly
	set maxUnits 4
	set minedOre @scrap
	set dropToCore false
	set releaseSecs 60 # wait secs before releasing when idle
	
	set status "INITIALIZING"
	set error "No error"
	set miningRange 7

	GetSwitch:
		set switch switch1
		jump GetSwitch equal switch null

	op shl procId @thisx 10 # first 10 bits for x
	op add procId procId @thisy # second 10 bits for y

	op mul releaseTicks releaseSecs 60

	GetStartInfo:
		ubind unitType
		jump GetStartInfo equal @unit null
		sensor cap @unit @itemCapacity
		sensor range @unit @range
		op sub range range 1

		ulocate building core false 0 coreX coreY coreFound core

	jump GetDropTarget equal dropToCore false
	set dropTarget core
	jump GetDropCoords always

	GetDropTarget:
		set l 0
		LinkLoop:
			getlink link l
			sensor type link @type
			jump Found equal link core
			jump Found equal type @container
			jump Found equal type @vault
			jump Found equal type @mass-driver
		NextLink:
			op add l l 1
			jump LinkLoop lessThan l @links
		NotFound:
			set error "No drop target is linked"
			set status "ERROR"
			jump GetDropTarget always
		Found:
			set dropTarget link
	
	GetDropCoords:
		sensor dropX dropTarget @x
		sensor dropY dropTarget @y

	set status "NONE"
	set error ""

#################################################################
# Flagging 
#################################################################

FlagStart:
	sensor active switch @enabled
	jump Reset equal active false
	set lastActive active
	
Count:
	set status "COUNTING"
	set i 0
	set flagged 0
	set free 0
	set firstUnit null
	CountLoop:
		ubind unitType
		jump Start equal @unit null
		sensor isDead @unit @dead
		jump Start equal isDead true
	
		jump FinishCount equal firstUnit @unit
		jump CountProcess notEqual firstUnit null
		set firstUnit @unit
	
	CountProcess:
		sensor flag @unit @flag
		jump CountFlagged equal flag procId
		jump CountFree equal flag 0
		jump NextCount always
		
	CountFlagged:
		op add flagged flagged 1
		jump NextCount always

	CountFree:
		op add free free 1
	
	NextCount:
		op add i i 1
		jump CountLoop always

	FinishCount:
		set totalFlagged flagged
		set totalFree free
		set totalUnits i

SelectFlagAction:
	jump Flag lessThan totalFlagged maxUnits
	jump Unflag greaterThan totalFlagged maxUnits
	jump DoneFlagging always

Flag:
	op sub neededFlags maxUnits totalFlagged
	op min neededFlags neededFlags totalFree
	jump DoneFlagging lessThanEq neededFlags 0

	set status "FLAGGING"
	set usedFlag procId
	set grabbedFlag 0
	jump RunFlagLoop always

Unflag:
	op sub neededFlags totalFlagged maxUnits
	jump DoneFlagging lessThanEq neededFlags 0
	set status "UNFLAGGING"
	set usedFlag 0
	set grabbedFlag procId

RunFlagLoop:
	set flagged 0
	set firstUnit null
	FlagLoop:
		ubind unitType
		jump Start equal @unit null
		sensor isDead @unit @dead
		jump FlagLoop equal isDead true
	
		jump DoneFlagging equal firstUnit @unit
		jump DoneFlagging greaterThanEq flagged neededFlags
		jump FlagProcess notEqual firstUnit null
		set firstUnit @unit
	
	FlagProcess:
		sensor flag @unit @flag
		jump FlagLoop equal flag usedFlag
		jump FlagLoop notEqual flag grabbedFlag

		ucontrol flag usedFlag
		op add flagged flagged 1
		jump FlagLoop always
	
DoneFlagging:
	set status "PROCESSING"

#################################################################
# Start Processing
#################################################################

Start:
CheckActive:
	sensor active switch @enabled
	jump StartOver notEqual lastActive active
	jump BindUnit equal active true

StartOver:
	set lastActive active
	jump FlagStart always
	
BindUnit:
	ubind unitType
	jump Start equal @unit null
	sensor isDead @unit @dead
	jump Start equal isDead true

	jump FinishGroup equal firstUnit @unit
	jump Process notEqual firstUnit null

StartGroup:
	set i 0
	set flagged 0
	set free 0
	set firstUnit @unit

Process:
	sensor flag @unit @flag
	jump NextFree equal flag 0
	jump Next notEqual flag procId

SelectAction:
	jump FindOre equal oreFound false
	sensor carried @unit @totalItems
	jump Mine equal carried 0

	sensor carriedItem @unit @firstItem
	jump DumpUnneeded notEqual carriedItem minedOre
	jump DropItems equal carried cap
	jump Mine always

DumpUnneeded:
	ucontrol itemDrop @air carried
	jump Mine always

DropItems:
	ucontrol within dropX dropY miningRange isNearDrop
	jump DropLoop equal isNearDrop true
	ucontrol boost true
	ucontrol approach dropX dropY miningRange
	jump NextFlagged always

	DropLoop:
		set dropI 0
		ucontrol boost false
		sensor carried @unit @totalItems
		LoopUntilEmpty:
			ucontrol itemDrop dropTarget carried
			sensor carried @unit @totalItems
			jump Mine equal carried 0
			op add dropI dropI 1
			jump LoopUntilEmpty lessThan dropI 100

		jump NextFlagged always

Mine:
	MoveToOre:
		ucontrol within oreX oreY miningRange isNearMine
		jump MineOre equal isNearMine true
		ucontrol boost true
		ucontrol approach oreX oreY miningRange
	
	MineOre:
		ucontrol mine oreX oreY

NextFlagged:
	op add flagged flagged 1
	jump Next always

NextFree:
	op add free free 1

Next:
	op add i i 1
	jump Start always
	
FinishGroup:
	set totalUnits i
	set totalFlagged flagged
	set totalFree free
	set i 0
	set flagged 0
	set free 0
	set firstUnit null
	jump SelectFlagAction notEqual maxUnits totalFlagged
	jump Start always

FindOre:
	ucontrol within dropX dropY 1 isNearDrop
	jump LocateOre equal isNearDrop true
	ucontrol approach dropX dropY 1
	jump FindOre always

	LocateOre:
		ulocate ore core true minedOre oreX oreY oreFound oreMine
		set error ""
		jump Start equal oreFound true

	NoOre:
		set error "No ore found near the drop target"
		
Error:
	set status "ERROR"
	control enabled switch false
	jump FlagStart always

Reset:
	jump FlagStart equal status "NONE"
	jump FlagStart equal status "ERROR"
	set lastActive active
	jump ReleaseAll equal status "RELEASING"
	set startTick @tick

StopAll:
	set status "STOPPING"

	set firstUnit null
	StopLoop:
		ubind unitType
		jump AllStopped equal @unit firstUnit
		sensor flag @unit @flag
		jump StopLoop notEqual flag procId

		jump StopUnit notEqual firstUnit null
		set firstUnit @unit
		
		StopUnit:
			ucontrol stop
			ucontrol itemDrop @air 100
			ucontrol unbind 
		jump StopLoop always
		
	AllStopped:
		set status "RELEASING"
		jump FlagStart always

ReleaseAll:
	# loop until release wait 
	set status "RELEASING"
	op sub elapsed @tick startTick
	jump FlagStart lessThan elapsed releaseTicks

	set firstUnit null

	ReleaseLoop:
		ubind unitType
		jump FinishRelease equal @unit null
		jump FinishRelease equal firstUnit @unit
		jump ReleaseUnit notEqual firstUnit null
		set firstUnit @unit
	
		ReleaseUnit:
			sensor flag @unit @flag
			jump ReleaseLoop notEqual flag procId
			ucontrol flag 0
			ucontrol within coreX coreY 20 isNearCore
			jump ReleaseLoop equal isNearCore true
			ucontrol approach coreX coreY 20
			jump ReleaseLoop always

	FinishRelease:
		set status "NONE"
		jump FlagStart always