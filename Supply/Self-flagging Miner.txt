Initialize:
	set status "INITIALIZE"
	set unitType @poly
	set maxUnits 4 # store upto 8

	set miningRange 8.75
	set dropRange 7
	set error " "
	set errorIcon @blast-compound

	GetSorter:
		set sorter sorter1
		jump GetSorter equal sorter null

	GetId:
		op shl procId @thisx 10
		op add procId procId @thisy

	GetStartInfo:
		ubind unitType
		jump GetStartInfo equal @unit null
		set firstUnit @unit

		sensor cap @unit @itemCapacity
		sensor range @unit @range
		op sub range range 1
		op min dropRange dropRange range
		
		ulocate building core false 0 coreX coreY coreFound core

	GetDropTarget:
		set l 0
		LinkLoop:
			getlink link l
			sensor type link @type
			jump Found equal link core
			jump Found equal type @container
			jump Found equal type @vault
			jump Found equal type @mass-driver
		NextLink:
			op add l l 1
			jump LinkLoop lessThan l @links
		NotFound:
			set dropTarget core
			jump GetDropCoords always
		Found:
			set dropTarget link
	
	GetDropCoords:
		sensor dropX dropTarget @x
		sensor dropY dropTarget @y

	Preflag:
		set status "PREFLAG"
		set preflagged 0
		PreflagLoop:

			sensor flag @unit @flag
			jump Unflag greaterThanEq preflagged maxUnits
			jump Preflag equal flag procId

			jump PreflagBind notEqual flag 0
			ucontrol flag procId
			
			Preflag:
				ucontrol itemDrop @air 200
				op add preflagged preflagged 1
				jump PreflagBind always
			Unflag:
				jump PreflagBind notEqual flag procId
				ucontrol flag 0
				ucontrol itemDrop @air 200
			PreflagBind:
				ubind unitType
				jump PreflagLoop notEqual firstUnit @unit

		FinishPreflag:
			set firstUnit null

	set status "IDLE"
	set lastOre null

	
Start:
CheckActive:
	sensor oreChoice sorter @config
	jump ChangeOre notEqual oreChoice lastOre
	jump Reset equal oreChoice null
	jump Start equal status "ERROR"

BindUnit:
	ubind unitType
	jump Start equal @unit null
	jump FinishGroup equal firstUnit @unit
	jump ProcessUnit notEqual firstUnit null
	set firstUnit @unit
	
ProcessUnit:
	sensor isDead @unit @dead
	jump BindUnit equal isDead true

	sensor flag @unit @flag
	jump BindUnit notEqual flag procId

SelectAction:
	jump FindOre equal oreFound false
	set status "MINING"
	sensor isMining @unit @mining
	sensor carried @unit @totalItems
	sensor carriedItem @unit @firstItem

	jump Mine equal carried 0
	jump DumpUnneeded notEqual carriedItem minedOre
	jump DropItems equal carried cap
	jump Mine always

DumpUnneeded:
	ucontrol itemDrop @air carried
	jump Mine always

DropItems:
	ucontrol within dropX dropY dropRange isNearDrop
	jump DropLoop equal isNearDrop true
	ucontrol boost true
	ucontrol approach dropX dropY dropRange
	jump Next always

	DropLoop:
		set dropI 0
		ucontrol boost false
		sensor carried @unit @totalItems
		LoopUntilEmpty:
			ucontrol itemDrop dropTarget carried
			sensor carried @unit @totalItems
			jump Mine equal carried 0
			op add dropI dropI 1
			jump LoopUntilEmpty lessThan dropI 100
	jump Next always

Mine:
	MoveToOre:
		ucontrol within oreX oreY miningRange isNearMine
		jump MineOre equal isNearMine true
		ucontrol boost true
		ucontrol approach oreX oreY miningRange
	
	MineOre:
		ucontrol mine oreX oreY
		jump Next always

FindOre:
	# Use this unit to find the nearest ore source
	set status "LOCATEORE"
	GoToDrop:
		ucontrol within dropX dropY 1 isNearDrop
		jump LocateOre equal isNearDrop true
		ucontrol boost true
		ucontrol approach dropX dropY 1
		jump GoToDrop always
	
	LocateOre:
		ulocate ore core true minedOre oreX oreY oreFound oreMine
		jump Next equal oreFound true

	NoOre:
		set error "No ore found"
		jump Error always

ChangeOre:
	jump Reset equal oreChoice null
	jump Start equal oreChoice errorIcon

	set status "CHANGEORE"
	set oreFound false

	ValidateOre:
		sensor id oreChoice @id
		jump CannotMine greaterThan id 9
		jump CannotMine equal oreChoice @metaglass
		jump CannotMine equal oreChoice @graphite
		jump CannotMine equal oreChoice @silicon
		jump CannotMine equal oreChoice @thorium

		jump CheckCoal equal oreChoice @coal
		jump CheckTitanium equal oreChoice @titanium
		jump ValidOre always
		
		CheckCoal:
			jump CannotMine equal unitType @mono
			jump ValidOre always 

		CheckTitanium:
			jump ValidOre equal unitType @mega
			jump ValidOre equal unitType @quasar
			jump CannotMine always 

	ValidOre:
		set lastOre minedOre
		set minedOre oreChoice
		jump Initialize always

	CannotMine:
		set error "Cannot mine ore"
		jump Error always

Next:
	jump Start always

FinishGroup:
	set totalUsed used
	set used 0
	set firstUnit null
	jump Start always
		
Error:
	set status "ERROR"
	set choiceBeforeError oreChoice
	control config sorter errorIcon
	jump Start always

Reset:
	jump Start equal status "IDLE"
	jump Start equal status "ERROR"
	set status "STOPPING"

	set firstUnit null
	StopLoop:
		ubind unitType
		jump AllStopped equal @unit firstUnit
		jump StopUnit notEqual firstUnit null
		set firstUnit @unit
		
		StopUnit:
			sensor flag @unit @flag
			jump StopLoop notEqual flag procId
			ucontrol stop
			ucontrol flag 0
			ucontrol itemDrop @air 200
		jump StopLoop always
		
	AllStopped:
		set status "IDLE"
		jump Start always


	
