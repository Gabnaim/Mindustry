set name "Transporter"

Initialize:
	UserConfig:
		set unitType @poly
		set maxUnits 4		
		set sourceMin 500
		set maxDistance 100 # do not bind if further away
							# set to 0 to skip

		# How long to wait before releasing units
		set releaseWaitSecs 60

	set items 4
	set material1 @copper
	set stockLevel1 900
	set material2 @lead
	set stockLevel2 1000
	set material3 @titanium
	set stockLevel3 700
	set material4 @silicon
	set stockLevel4 900

	set returnMaterial @surge-alloy

	set error " "
	set status "INITIALIZE"
	
	set arrayLength 12
	jump TooMany greaterThan maxUnits arrayLength
	op mul releaseWaitMs releaseWaitSecs 1000

	op mul procId @thisx @maph
	op add procId procId @thisy
	op floor procId procId

	set dropRange 7
	op add checkRange dropRange 1

	GetDropTarget:
		set l 0
		LinkLoop:
			getlink link l
			sensor type link @type
			sensor cap link @itemCapacity
			jump Found greaterThanEq cap 10
		NextLink:
			op add l l 1
			jump LinkLoop lessThan l @links
			jump GetDropTarget always
		Found:
			set dropTarget link
	
	GetDropCoords:
		sensor dropX dropTarget @x
		sensor dropY dropTarget @y 

	GetStartInfo:
		ubind unitType
		jump NoUnits equal @unit null
		sensor cap @unit @itemCapacity
		ulocate building core false 0 sourceX sourceY sourceFound source
		jump GetStartInfo equal sourceFound false
	
#-------------------------------------------------
Preflag:
#-------------------------------------------------
	set flagStart @time
	Count:
		set status "COUNT"
		set flagged 0
		set free 0
		set units 0
		set tooFar 0
		
		ubind unitType
		jump NoUnits equal @unit null
		set firstUnit @unit
		jump CountProcess always
		
		CountLoop:
			ubind unitType
			jump FinishCount equal firstUnit @unit
	
		CountProcess:
			sensor isDead @unit @dead
			jump CountLoop equal isDead true
			sensor flag @unit @flag
			jump CountFree equal flag 0
			jump NextCount notEqual flag procId
			jump CountFlagged greaterThanEq flagged maxUnits

			SaveFlagged: 
				set unit @unit
				set unitI flagged
				op add callback @counter 1
				jump SetUnit always
	
			CountFlagged:
				op add flagged flagged 1
				jump NextCount always
	
			CountFree:
				op add free free 1
		
		NextCount:
			op add units units 1
			jump CountLoop always
	
		FinishCount:
			jump FlagDone equal flagged maxUnits
			jump Unflag greaterThan flagged maxUnits
	
	Flag:
		jump FlagDone equal free 0

		set status "FLAG"
		ubind unitType
		set firstUnit @unit
		jump FlagProcess always
	
		FlagLoop:
			ubind unitType
			jump FinishFlag equal firstUnit @unit
	
		FlagProcess:
			sensor flag @unit @flag
			jump NextFlag notEqual flag 0
	
		ProcessFree: 
			sensor controlled @unit @controlled
			jump CheckDistance equal controlled 0
			jump NextFlag greaterThanEq controlled 2
	
			CheckDistance:
				jump FlagUnit lessThanEq maxDistance 0
				sensor x @unit @x
				sensor y @unit @y
				op sub xDiff @thisx x
				op sub yDiff @thisy y
				op len distance xDiff yDiff
				jump UnitTooFar greaterThan distance maxDistance
	
			FlagUnit:
				ucontrol flag procId
				set unitI flagged
				set unit @unit
				op add callback @counter 1
				jump SetUnit always
				op add flagged flagged 1

		UnitTooFar:
			op add tooFar tooFar 1
		
		NextFlag:
			jump FlagLoop lessThan flagged maxUnits
		
		FinishFlag:
			jump FlagDone equal flagged maxUnits
			jump NoUnits equal flagged 0
			jump FlagDone always
	
	Unflag:
		set status "UNFLAG"		

		ubind unitType
		set firstUnit @unit
		jump UnflagProcess always
	
		UnflagLoop:
			ubind unitType
			jump FlagDone equal firstUnit @unit
	
		UnflagProcess:
			sensor isDead @unit @dead
			jump UnflagLoop equal isDead true
			sensor flag @unit @flag
			jump NextUnflag notEqual flag procId
	
		UnflagUnit:
			ucontrol flag 0
			op sub flagged flagged 1
		
		NextUnflag:
			jump UnflagLoop greaterThan flagged maxUnits
		
		FlagDone:
			op sub flagTime @time flagStart

	ClearArray:
		jump ClearDone equal flagged maxUnits
		set unitI flagged 
		set unit null
		ClearLoop:
			op add callback @counter 1
			jump SetUnit always
			op add unitI unitI 1
			jump ClearLoop lessThan unitI maxUnits
		ClearDone:

PreStart:
	set status "IDLE"
	set error " "
	set unitI 0
	set releaseStart @time
	sensor lastActive switch @enabled

#--------------------------------------------------
MainLoop:
#--------------------------------------------------
Start:
	op sub releaseWait @time releaseStart
	jump Reset greaterThanEq releaseWait releaseWaitMs

CheckUnit:
	op add callback @counter 1
	jump GetUnit always

	jump Rebind equal unit null
	sensor isDead unit @dead
	jump Rebind equal isDead true
	sensor flag unit @flag
	jump Reflag equal flag 0
	jump Rebind notEqual flag procId
	jump Rebind lessThan flagged maxUnits
	jump DoStuff always

Rebind:
	jump Preflag always
	
Reflag:
	ubind unit
	ucontrol flag procId
	op add callback @counter 1
	jump SetUnit always

DoStuff:	
	ubind unit
	ucontrol boost true
	set mule unit
	set releaseStart @time
	set status "TRANSPORTING"

SelectMaterial:
	sensor carried mule @totalItems
	sensor carriedMat mule @firstItem

	set matI 0
	set minIndex -1
	set minRate 1
	SelectLoop:
		op add callback @counter 1
		jump GetMaterial always 

	CheckMaterial:
		sensor dropLevel dropTarget material
		op sub needed stockLevel dropLevel
		jump NextMaterial lessThanEq needed 0

		# if we are carrying material that is still needed,
		# deliver it even if another stock is lower
		jump Feed equal material carriedMat
	
		op div stockRate dropLevel stockLevel
		jump NextMaterial greaterThanEq stockRate minRate

		sensor sourceLevel source material
		op sub available sourceLevel sourceMin
		jump NextMaterial lessThanEq available 0
	
		set minIndex matI
		set minRate stockRate

	NextMaterial:
		op add matI matI 1
		jump SelectLoop lessThan matI items

	jump Next equal minIndex -1

	GetMinMaterial:
		set matI minIndex
		op add callback @counter 1
		jump GetMaterial always 	

		sensor dropLevel dropTarget material
		op sub needed stockLevel dropLevel
		op min amount needed available
		op min amount amount cap

	set error " "
	set releaseStart @time

Feed:
SelectAction:
	sensor carried @unit @totalItems
	sensor carriedMat @unit @firstItem
	jump Pickup equal carried 0
	jump DropToSource notEqual carriedMat material
	jump DropItems equal carried cap

DropToSource:
	ucontrol within sourceX sourceY dropRange isNearSource
	jump SourceDrop equal isNearSource true
	ucontrol approach sourceX sourceY dropRange
	jump Next always

	SourceDrop:
		set releaseStart @time
		set dropI 0
		SourceDropLoop:
			ucontrol itemDrop source cap
			sensor carried @unit @totalItems
			jump Next equal carried 0
			op add dropI dropI 1
			jump SourceDropLoop lessThan dropI 100

		# drop to air if source is full
		ucontrol itemDrop @air cap
		jump Next always
	
DropItems:
	ucontrol approach dropX dropY dropRange
	ucontrol within dropX dropY checkRange isNearDrop
	jump Next equal isNearDrop false

	set dropI 0
	DropLoop:
		ucontrol itemDrop dropTarget carried
		sensor carried @unit @totalItems
		jump Return equal carried 0
		op add dropI dropI 1
		jump DropLoop lessThan dropI 100

	jump Next always

Return:
	jump Next strictEqual returnMaterial null
	sensor returnStock dropTarget returnMaterial
	jump Next equal returnStock 0

	set pickupI 0
	ReturnLoop:
		ucontrol itemTake dropTarget returnMaterial cap
		sensor carried mule @totalItems
		jump Next equal carried cap
		sensor returnStock dropTarget returnMaterial
		jump Next equal returnStock 0

		op add pickupI pickupI 1
		jump ReturnLoop lessThan pickupI 100 

	jump DropToSource always

Pickup:
	ucontrol approach sourceX sourceY dropRange
	ucontrol within sourceX sourceY checkRange isNearPickup
	jump Next equal isNearPickup false
	
	set pickupI 0
	PickupLoop:
		ucontrol itemTake source material cap
		sensor carried @unit @totalItems
		jump DropItems equal carried cap

		op add pickupI pickupI 1
		jump PickupLoop lessThan pickupI 100 

Next:
	op add unitI unitI 1
	jump Start lessThan unitI flagged

FinishGroup:
	set unitI 0
	jump Start always

#--------------------------------------------------
WrapUp:
#--------------------------------------------------

Reset:
	jump Start equal status "IDLE"
	jump Release equal status "RELEASING"

Stop:
	set status "STOPPING"
	set unitI 0
	StopLoop:
		op add callback @counter 1
		jump GetUnit always
		jump StopNext equal unit null
		
		ubind unit
		ucontrol stop

		StopNext:
			op add unitI unitI 1
			jump StopLoop lessThan unitI maxUnits
		set status "RELEASING"
		set unitI 0

Release:
	op sub releaseWait @time releaseStart
	jump Start lessThan releaseWait releaseWaitMs
	set unitI 0
	ReleaseLoop:
		op add callback @counter 1
		jump GetUnit always
		jump ReleaseNext equal unit null
		
		ubind unit
		ucontrol flag 0

		ReleaseNext:
			op add unitI unitI 1
			jump ReleaseLoop lessThan unitI maxUnits
		
	FinishRelease:
		set status "IDLE"
		set error "Released idle units"
		set releaseStart @time
		set unitI 0
		jump Start always
#-------------------------------------------------
# Errors:
#-------------------------------------------------
TooMany:
	set error "Max 12 units supported"
	jump Error always

NoStorage:
	set error "Need linked storage"
	jump Error always

NotEnough:
	set error "Not enough stock"
	jump Start always

NoUnits:
	jump TooFar greaterThan tooFar 0
	set error "No free units"
	jump Preflag always

TooFar:
	set error "Some units are too far"
	jump Preflag always

Error:
	# idle here until user looks at error and restarts
	jump Error always

#-------------------------------------------------
# Arrays:
#-------------------------------------------------
SetUnit:
	op mul offset unitI 2
	op add @counter @counter offset

	set unit0 unit
	set @counter callback
	set unit1 unit
	set @counter callback
	set unit2 unit
	set @counter callback
	set unit3 unit
	set @counter callback
	set unit4 unit
	set @counter callback
	set unit5 unit
	set @counter callback
	set unit6 unit
	set @counter callback
	set unit7 unit
	set @counter callback
	set unit8 unit
	set @counter callback
	set unit9 unit
	set @counter callback

	set unit10 unit
	set @counter callback
	set unit11 unit
	set @counter callback

GetUnit:
	op mul offset unitI 2
	op add @counter @counter offset

	set unit unit0
	set @counter callback
	set unit unit1
	set @counter callback
	set unit unit2
	set @counter callback
	set unit unit3
	set @counter callback
	set unit unit4
	set @counter callback
	set unit unit5
	set @counter callback
	set unit unit6
	set @counter callback
	set unit unit7
	set @counter callback
	set unit unit8
	set @counter callback
	set unit unit9
	set @counter callback

	set unit unit10
	set @counter callback
	set unit unit11
	set @counter callback

GetMaterial:
	op mul offset matI 3
	op add @counter @counter offset

	set material material1
	set stockLevel stockLevel1
	set @counter callback

	set material material2
	set stockLevel stockLevel2
	set @counter callback

	set material material3
	set stockLevel stockLevel3
	set @counter callback

	set material material4
	set stockLevel stockLevel4
	set @counter callback
	